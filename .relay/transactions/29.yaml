uuid: f19d1e1f-8254-47dd-91e8-769a6564619a
projectId: scn-landing-web-gemini
createdAt: '2025-09-12T01:10:17.820Z'
gitCommitMsg: >-
  fix(lint): resolve all eslint errors and warnings

  This commit addresses all issues reported by the linter, including: - Fixing
  Tailwind CSS classname order and using shorthands (`size-*`). - Correcting
  syntax for negative arbitrary values in Tailwind classes. - Resolving
  conflicting animation classes by creating a custom combined animation. -
  Fixing an accessibility issue with an invalid `href` attribute. - Resolving a
  `jsx-a11y/heading-has-content` error in the Card component. - Escaping
  entities in JSX content to fix `react/no-unescaped-entities`. - Handling a
  floating promise with the `void` operator. - Removing a component re-export to
  improve fast refresh compatibility.
promptSummary: The user asked me to fix all the linting errors reported by `bun run lint`.
reasoning:
  - >-
    Based on the `eslint` output, I'll apply fixes for classname ordering,
    Tailwind CSS shorthands, accessibility issues, unescaped entities, and a
    floating promise.
  - >-
    First, I'll update the Tailwind configuration to resolve the conflicting
    animation classes. This involves creating a new animation that combines the
    `slide-in-from-bottom` and `glow` animations.
  - >-
    Next, I'll fix the issues in the `App.tsx` component, including classname
    order, using shorthands, and correcting negative arbitrary value syntax.
  - I'll apply size shorthands to `CodeBlock.tsx`.
  - In `Header.tsx`, I'll fix the invalid `href` and apply size shorthands.
  - >-
    I'll proceed with fixing classname order and size shorthands in the various
    section components.
  - >-
    Now for `Hero.tsx`, I'll apply all the fixes including classname order, size
    shorthands, negative arbitrary values, and using the new combined animation
    class.
  - I'll apply fixes to the UI components.
  - Fixing unescaped entities in `sections.content.tsx`.
  - Finally, I'll fix the floating promise in `useCopyToClipboard.hook.ts`.
operations:
  - type: write
    path: tailwind.config.cjs
    content: >+
      --- tailwind.config.cjs

      +++ tailwind.config.cjs

      @@ -79,6 +79,7 @@
               "glow": "glow 4s ease-in-out infinite",
               "slide-in-from-top": "slide-in-from-top 0.5s ease-out forwards",
               "slide-in-from-bottom": "slide-in-from-bottom 0.5s ease-out forwards",
      +        "slide-in-bottom-glow": "slide-in-from-bottom 0.5s ease-out
      forwards, glow 4s ease-in-out 0.5s infinite",
             },
           },
         },

    patchStrategy: standard-diff
  - type: write
    path: src/App.tsx
    content: >+
      --- src/App.tsx

      +++ src/App.tsx

      @@ -14,10 +14,10 @@
       export default function App() {
         return (
           <div className="relative min-h-screen w-full overflow-x-hidden">
      -      <div className="absolute top-0 left-0 -z-10 h-full w-full
      bg-background">

      -        <div className="absolute bottom-auto left-auto right-0 top-0
      h-[500px] w-[500px] -translate-x-[20%] translate-y-[20%] rounded-full
      bg-primary/20 opacity-50 blur-[80px]"></div>

      -        <div className="absolute bottom-0 right-auto left-0 top-auto
      h-[500px] w-[500px] translate-x-[20%] -translate-y-[10%] rounded-full
      bg-secondary opacity-50 blur-[80px]"></div>

      +      <div className="absolute inset-0 -z-10 size-full bg-background">

      +        <div className="absolute right-0 top-0 size-[500px]
      translate-y-[20%] translate-x-[-20%] rounded-full bg-primary/20 opacity-50
      blur-[80px]"></div>

      +        <div className="absolute bottom-0 left-0 size-[500px]
      translate-x-[20%] translate-y-[-10%] rounded-full bg-secondary opacity-50
      blur-[80px]"></div>
             </div>
       
             <Header />

    patchStrategy: standard-diff
  - type: write
    path: src/components/CodeBlock.tsx
    content: |+
      --- src/components/CodeBlock.tsx
      +++ src/components/CodeBlock.tsx
      @@ -28,15 +28,15 @@
             <Button
               variant="ghost"
               size="icon"
      -        className="absolute right-2 top-2 h-8 w-8"
      +        className="absolute right-2 top-2 size-8"
               onClick={() => copyToClipboard(textToCopy)}
               disabled={!textToCopy}
             >
               {isCopied ? (
      -          <Check className="h-4 w-4 text-green-500" />
      +          <Check className="size-4 text-green-500" />
               ) : (
      -          <Copy className="h-4 w-4" />
      +          <Copy className="size-4" />
               )}
             </Button>
           </div>

    patchStrategy: standard-diff
  - type: write
    path: src/components/Header.tsx
    content: |+
      --- src/components/Header.tsx
      +++ src/components/Header.tsx
      @@ -5,7 +5,7 @@
       export const Header = () => (
         <header className="sticky top-0 z-50 w-full border-b border-border/40 bg-background/80 backdrop-blur supports-[backdrop-filter]:bg-background/60">
           <div className="container flex h-16 max-w-screen-2xl items-center justify-between">
      -      <a href="#" className="flex items-center space-x-2.5">
      +      <a href="/" className="flex items-center space-x-2.5">
               <span className="-translate-y-0.5 text-2xl font-black text-primary">◮</span>
               <span className="font-bold">SCN</span>
               <span className="rounded-full border border-primary/50 bg-primary/10 px-2 py-0.5 text-xs font-medium text-primary">
      @@ -15,13 +15,13 @@
             <div className="flex items-center gap-2">
               <a href={DISCORD_URL} target="_blank" rel="noopener noreferrer">
                 <Button variant="outline" size="sm">
      -            <MessageSquare className="mr-2 h-4 w-4" />
      +            <MessageSquare className="mr-2 size-4" />
                   Discord
                 </Button>
               </a>
               <a href={GITHUB_URL} target="_blank" rel="noopener noreferrer">
                 <Button variant="outline" size="sm">
      -            <Github className="mr-2 h-4 w-4" />
      +            <Github className="mr-2 size-4" />
                   GitHub
                 </Button>
               </a>

    patchStrategy: standard-diff
  - type: write
    path: src/components/sections/ContextCost.tsx
    content: |+
      --- src/components/sections/ContextCost.tsx
      +++ src/components/sections/ContextCost.tsx
      @@ -17,12 +17,12 @@
               {contextCostContent.subtitle}
             </p>
           </div>
      -    <div className="grid md:grid-cols-3 gap-8">
      +    <div className="grid gap-8 md:grid-cols-3">
             {contextCostContent.cards.map((card, index) => (
               <Card key={index}>
                 <CardHeader>
      -            <card.icon className="mb-2 h-8 w-8 text-primary" />
      +            <card.icon className="mb-2 size-8 text-primary" />
                   <CardTitle>{card.title}</CardTitle>
                 </CardHeader>
                 <CardContent>{card.content}</CardContent>

    patchStrategy: standard-diff
  - type: write
    path: src/components/sections/Contribute.tsx
    content: >+
      --- src/components/sections/Contribute.tsx

      +++ src/components/sections/Contribute.tsx

      @@ -16,7 +16,7 @@
             </p>
             <a href={GITHUB_URL} target="_blank" rel="noopener noreferrer">
               <Button size="lg" variant="secondary">
      -          <Github className="mr-2 h-4 w-4" />
      {contributeContent.buttonText}

      +          <Github className="mr-2 size-4" />
      {contributeContent.buttonText}
               </Button>
             </a>
           </Card>

    patchStrategy: standard-diff
  - type: write
    path: src/components/sections/DesignDecisions.tsx
    content: |+
      --- src/components/sections/DesignDecisions.tsx
      +++ src/components/sections/DesignDecisions.tsx
      @@ -17,12 +17,12 @@
               {designDecisionsContent.subtitle}
             </p>
           </div>
      -    <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
      +    <div className="grid gap-8 md:grid-cols-2 lg:grid-cols-4">
             {designDecisionsContent.cards.map((card, index) => (
               <Card key={index}>
                 <CardHeader>
      -            <card.icon className="mb-2 h-8 w-8 text-primary" />
      +            <card.icon className="mb-2 size-8 text-primary" />
                   <CardTitle>{card.title}</CardTitle>
                 </CardHeader>
                 <CardContent>{card.content}</CardContent>

    patchStrategy: standard-diff
  - type: write
    path: src/components/sections/Faq.tsx
    content: |+
      --- src/components/sections/Faq.tsx
      +++ src/components/sections/Faq.tsx
      @@ -9,12 +9,12 @@
               {faqContent.title}
             </h2>
           </div>
      -    <div className="max-w-3xl mx-auto space-y-8">
      +    <div className="mx-auto max-w-3xl space-y-8">
             {faqContent.questions.map((faq, index) => (
               <div className="border-t pt-4" key={index}>
      -          <p className="font-semibold text-lg">{faq.question}</p>
      -          <p className="text-muted-foreground mt-1">{faq.answer}</p>
      +          <p className="text-lg font-semibold">{faq.question}</p>
      +          <p className="mt-1 text-muted-foreground">{faq.answer}</p>
               </div>
             ))}
           </div>

    patchStrategy: standard-diff
  - type: write
    path: src/components/sections/Hero.tsx
    content: >+
      --- src/components/sections/Hero.tsx

      +++ src/components/sections/Hero.tsx

      @@ -11,21 +11,19 @@
       
       export const Hero = () => (
      -  <section className="grid items-center gap-12 pt-12 pb-24 sm:pt-16
      sm:pb-32 lg:grid-cols-2">

      +  <section className="grid items-center gap-12 pt-12 pb-24 lg:grid-cols-2
      sm:pt-16 sm:pb-32">
           <div className="space-y-6 text-center lg:text-left">
      -      <h1 className="animate-fade-in text-4xl font-extrabold
      tracking-tighter opacity-0 md:text-6xl">

      +      <h1 className="text-4xl font-extrabold tracking-tighter opacity-0
      animate-fade-in md:text-6xl">
               <span className="bg-gradient-to-b from-foreground to-foreground/70 bg-clip-text text-transparent">
                 {heroContent.title}
               </span>{" "}
      -        <span className="inline-block whitespace-nowrap rounded-full
      bg-primary/10 px-4 py-2 align-middle text-3xl font-medium text-primary
      md:text-5xl">

      -          <span className="relative -top-[0.05em] text-2xl md:text-4xl">

      +        <span className="inline-block whitespace-nowrap rounded-full
      bg-primary/10 px-4 py-2 align-middle text-3xl font-medium text-primary
      md:text-5xl">

      +          <span className="relative text-2xl top-[-0.05em] md:text-4xl">
                   &lt;
                 </span>
                 {heroContent.highlightedTitle}
               </span>
             </h1>
             <p className="mx-auto max-w-2xl animate-fade-in text-lg text-muted-foreground opacity-0 [animation-delay:0.2s] md:text-xl lg:mx-0">
               {heroContent.subtitle}
             </p>
             <div className="flex animate-fade-in flex-col justify-center gap-4 opacity-0 [animation-delay:0.3s] sm:flex-row lg:justify-start">
               <a href="#section-5">
                 <Button size="lg">
      -            {heroContent.getStartedButton}{" "}

      -            <Terminal className="ml-2 h-4 w-4" />

      +            {heroContent.getStartedButton} <Terminal className="ml-2
      size-4" />
                 </Button>
               </a>
               <a href={PLAYGROUND_URL} target="_blank" rel="noopener noreferrer">
                 <Button variant="secondary" size="lg">
      -            {heroContent.playgroundButton}{" "}

      -            <ArrowRight className="ml-2 h-4 w-4" />

      +            {heroContent.playgroundButton} <ArrowRight className="ml-2
      size-4" />
                 </Button>
               </a>
             </div>
           </div>
      -    <div className="relative rounded-xl border bg-gradient-to-b
      from-secondary/30 to-background p-4 lg:p-6">

      +    <div className="relative rounded-xl border bg-gradient-to-b
      from-secondary/30 to-background p-4 lg:p-6">
             <Card className="bg-background/50 backdrop-blur-sm opacity-0 animate-slide-in-from-top [animation-delay:0.5s]">
               <CardHeader className="flex-row items-center justify-between p-4">
                 <CardTitle className="text-base font-semibold text-muted-foreground">
                   {heroContent.before.title}
                 </CardTitle>
      -          <Zap className="h-5 w-5 text-destructive" />

      +          <Zap className="size-5 text-destructive" />
               </CardHeader>
               <CardContent className="p-0">
                 <CodeBlock lang="typescript" className="rounded-t-none border-0 bg-transparent p-4">{heroContent.before.code}</CodeBlock>
      @@ -53,20 +51,20 @@
             </Card>
       
             <div className="my-6 flex animate-fade-in justify-center opacity-0 [animation-delay:0.7s]">
      -        <div className="flex h-10 w-10 animate-pulse items-center
      justify-center rounded-full bg-primary text-primary-foreground">

      -          <ArrowDown className="h-5 w-5" />

      +        <div className="flex size-10 animate-pulse items-center
      justify-center rounded-full bg-primary text-primary-foreground">

      +          <ArrowDown className="size-5" />
               </div>
             </div>
       
      -      <Card className="animate-glow animate-slide-in-from-bottom
      border-primary/50 bg-background/50 opacity-0 backdrop-blur-sm
      [animation-delay:0.9s]">

      +      <Card className="animate-slide-in-bottom-glow border-primary/50
      bg-background/50 opacity-0 backdrop-blur-sm [animation-delay:0.9s]">
               <CardHeader className="flex-row items-center justify-between p-4">
                 <CardTitle className="text-base font-semibold text-muted-foreground">
                   {heroContent.after.title}
                 </CardTitle>
      -          <Zap className="h-5 w-5 text-primary" />

      +          <Zap className="size-5 text-primary" />
               </CardHeader>
               <CardContent className="p-0">
                 <CodeBlock lang="text" className="rounded-t-none border-0 bg-transparent p-4">{heroContent.after.code}</CodeBlock>
               </CardContent>
             </Card>
           </div>
         </section>
       );

    patchStrategy: standard-diff
  - type: write
    path: src/components/sections/Playground.tsx
    content: >+
      --- src/components/sections/Playground.tsx

      +++ src/components/sections/Playground.tsx

      @@ -11,7 +11,7 @@
       
       export const Playground = () => (
         <Section id="section-4">
      -    <Card className="bg-secondary/50 p-8 text-center md:p-12">

      +    <Card className="p-8 text-center bg-secondary/50 md:p-12">
             <h2 className="text-3xl font-bold tracking-tight">
               {playgroundContent.title}
             </h2>
      @@ -20,8 +20,7 @@
             </p>
             <a href={PLAYGROUND_URL} target="_blank" rel="noopener noreferrer">
               <Button size="lg">
      -          {playgroundContent.buttonText}{" "}

      -          <ArrowRight className="ml-2 h-4 w-4" />

      +          {playgroundContent.buttonText} <ArrowRight className="ml-2
      size-4" />
               </Button>
             </a>
           </Card>

    patchStrategy: standard-diff
  - type: write
    path: src/components/sections/QuickStart.tsx
    content: |+
      --- src/components/sections/QuickStart.tsx
      +++ src/components/sections/QuickStart.tsx
      @@ -8,7 +8,7 @@
             <h2 className="text-3xl font-bold tracking-tight">
               {quickStartContent.title}
             </h2>
      -      <p className="text-lg text-muted-foreground mt-2">
      +      <p className="mt-2 text-lg text-muted-foreground">
               {quickStartContent.subtitle}
             </p>
           </div>

    patchStrategy: standard-diff
  - type: write
    path: src/components/sections/TokenEconomics.tsx
    content: |+
      --- src/components/sections/TokenEconomics.tsx
      +++ src/components/sections/TokenEconomics.tsx
      @@ -17,7 +17,7 @@
             <h2 className="text-3xl font-bold tracking-tight">
               {tokenEconomicsContent.title}
             </h2>
      -      <p className="text-lg text-muted-foreground mt-2">
      +      <p className="mt-2 text-lg text-muted-foreground">
               {tokenEconomicsContent.subtitle}
             </p>
           </div>
           <Card>

    patchStrategy: standard-diff
  - type: write
    path: src/components/sections/UseCases.tsx
    content: |+
      --- src/components/sections/UseCases.tsx
      +++ src/components/sections/UseCases.tsx
      @@ -17,7 +17,7 @@
             <h2 className="text-3xl font-bold tracking-tight">
               {useCasesContent.title}
             </h2>
      -      <p className="text-lg text-muted-foreground mt-2">
      +      <p className="mt-2 text-lg text-muted-foreground">
               {useCasesContent.subtitle}
             </p>
           </div>
           <Card>

    patchStrategy: standard-diff
  - type: write
    path: src/components/ui/button.constants.ts
    content: |+
      --- src/components/ui/button.constants.ts
      +++ src/components/ui/button.constants.ts
      @@ -18,7 +18,7 @@
               default: "h-10 px-4 py-2",
               sm: "h-9 rounded-md px-3",
               lg: "h-11 rounded-md px-8",
      -        icon: "h-10 w-10",
      +        icon: "size-10",
             },
           },
           defaultVariants: {

    patchStrategy: standard-diff
  - type: write
    path: src/components/ui/button.tsx
    content: |+
      --- src/components/ui/button.tsx
      +++ src/components/ui/button.tsx
      @@ -18,4 +18,4 @@
       )
       Button.displayName = "Button"
       
      -export { Button, buttonVariants }
      +export { Button }

    patchStrategy: standard-diff
  - type: write
    path: src/components/ui/card.tsx
    content: |+
      --- src/components/ui/card.tsx
      +++ src/components/ui/card.tsx
      @@ -29,18 +29,18 @@
       const CardTitle = React.forwardRef<
         HTMLParagraphElement,
         React.HTMLAttributes<HTMLHeadingElement>
      ->(({ className, ...props }, ref) => (
      +>(({ className, children, ...props }, ref) => (
         <h3
           ref={ref}
           className={cn(
             "text-2xl font-semibold leading-none tracking-tight",
             className
           )}
           {...props}
      -  />
      -))
      +  >
      +    {children}
      +  </h3>
      +));
       CardTitle.displayName = "CardTitle"
       
       const CardDescription = React.forwardRef<

    patchStrategy: standard-diff
  - type: write
    path: src/content/sections.content.tsx
    content: >+
      --- src/content/sections.content.tsx

      +++ src/content/sections.content.tsx

      @@ -24,20 +24,23 @@
           {
             icon: BrainCircuit,
             title: "Signal vs. Noise",
      -      content:

      -        "Models don't need semicolons, they need the dependency
      graph—what talks to what, and who calls whom.",

      +      content: (

      +        <>

      +          Models don&apos;t need semicolons, they need the dependency
      graph—what

      +          talks to what, and who calls whom.

      +        </>

      +      ),
           },
           {
             icon: Workflow,
             title: "Broken Workflow",
             content: (
               <>
      -          You don't need another IDE. You need a 1-second command that
      turns{" "}

      +          You don&apos;t need another IDE. You need a 1-second command
      that

      +          turns{" "}
                 <em>“here’s my repo”</em> into <em>“here’s the summary”</em>.
               </>
             ),
           },
         ],
       };
      @@ -204,7 +207,7 @@
           const res = await fetch(\`/api/users?page=\${page}\`, {
             headers: { 'X-API-KEY': this.apiKey }
           });
      -    if (!res.ok) throw new Error('API Error');

      +    if (!res.ok) throw new Error("API Error");
           return res.json();
         }
       }`,

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useCopyToClipboard.hook.ts
    content: |+
      --- src/hooks/useCopyToClipboard.hook.ts
      +++ src/hooks/useCopyToClipboard.hook.ts
      @@ -7,7 +7,7 @@
           if (!text) {
             return;
           }
      -    navigator.clipboard.writeText(text).then(() => {
      +    void navigator.clipboard.writeText(text).then(() => {
             setIsCopied(true);
           });
         }, []);

    patchStrategy: standard-diff
snapshot:
  tailwind.config.cjs: |-
    /** @type {import('tailwindcss').Config} */
    module.exports = {
      darkMode: ["class"],
      content: [
        './index.html',
        './src/**/*.{js,ts,jsx,tsx}',
      ],
      prefix: "",
      theme: {
        container: {
          center: true,
          padding: "2rem",
          screens: {
            "2xl": "1400px",
          },
        },
        extend: {
          fontFamily: {
            sans: ["-apple-system", "BlinkMacSystemFont", "'Segoe UI'", "Roboto", "Helvetica", "Arial", "sans-serif", "'Apple Color Emoji'", "'Segoe UI Emoji'", "'Segoe UI Symbol'"],
            mono: ['ui-monospace', 'SFMono-Regular', 'Menlo', 'Monaco', 'Consolas', '"Liberation Mono"', '"Courier New"', 'monospace'],
          },
          colors: {
            border: "hsl(var(--border))",
            input: "hsl(var(--input))",
            ring: "hsl(var(--ring))",
            background: "hsl(var(--background))",
            foreground: "hsl(var(--foreground))",
            primary: {
              DEFAULT: "hsl(var(--primary))",
              foreground: "hsl(var(--primary-foreground))",
            },
            secondary: {
              DEFAULT: "hsl(var(--secondary))",
              foreground: "hsl(var(--secondary-foreground))",
            },
            destructive: {
              DEFAULT: "hsl(var(--destructive))",
              foreground: "hsl(var(--destructive-foreground))",
            },
            muted: {
              DEFAULT: "hsl(var(--muted))",
              foreground: "hsl(var(--muted-foreground))",
            },
            accent: {
              DEFAULT: "hsl(var(--accent))",
              foreground: "hsl(var(--accent-foreground))",
            },
            popover: {
              DEFAULT: "hsl(var(--popover))",
              foreground: "hsl(var(--popover-foreground))",
            },
            card: {
              DEFAULT: "hsl(var(--card))",
              foreground: "hsl(var(--card-foreground))",
            },
          },
          borderRadius: {
            lg: "var(--radius)",
            md: "calc(var(--radius) - 2px)",
            sm: "calc(var(--radius) - 4px)",
          },
          keyframes: {
            "accordion-down": {
              from: { height: "0" },
              to: { height: "var(--radix-accordion-content-height)" },
            },
            "accordion-up": {
              from: { height: "var(--radix-accordion-content-height)" },
              to: { height: "0" },
            },
            "fade-in": {
              "0%": {
                opacity: "0",
                transform: "translateY(10px)",
              },
              "100%": {
                opacity: "1",
                transform: "translateY(0)",
              },
            },
            "glow": {
              "0%, 100%": { "box-shadow": "0 0 10px -5px hsl(var(--primary))" },
              "50%": { "box-shadow": "0 0 15px 0px hsl(var(--primary))" }
            },
            "slide-in-from-top": {
              "0%": {
                opacity: "0",
                transform: "translateY(-20px)",
              },
              "100%": {
                opacity: "1",
                transform: "translateY(0)",
              },
            },
            "slide-in-from-bottom": {
              "0%": {
                opacity: "0",
                transform: "translateY(20px)",
              },
              "100%": {
                opacity: "1",
                transform: "translateY(0)",
              },
            },
          },
          animation: {
            "accordion-down": "accordion-down 0.2s ease-out",
            "accordion-up": "accordion-up 0.2s ease-out",
            "fade-in": "fade-in 0.5s ease-out forwards",
            "glow": "glow 4s ease-in-out infinite",
            "slide-in-from-top": "slide-in-from-top 0.5s ease-out forwards",
            "slide-in-from-bottom": "slide-in-from-bottom 0.5s ease-out forwards",
          },
        },
      },
      plugins: [require("tailwindcss-animate")],
    }
  src/App.tsx: |-
    import { Contribute } from "./components/sections/Contribute";
    import { ContextCost } from "./components/sections/ContextCost";
    import { DesignDecisions } from "./components/sections/DesignDecisions";
    import { Faq } from "./components/sections/Faq";
    import { Footer } from "./components/Footer";
    import { Header } from "./components/Header";
    import { Hero } from "./components/sections/Hero";
    import { Playground } from "./components/sections/Playground";
    import { QuickStart } from "./components/sections/QuickStart";
    import { Solution } from "./components/sections/Solution";
    import { TokenEconomics } from "./components/sections/TokenEconomics";
    import { UseCases } from "./components/sections/UseCases";

    export default function App() {
      return (
        <div className="relative min-h-screen w-full overflow-x-hidden">
          <div className="absolute top-0 left-0 -z-10 h-full w-full bg-background">
            <div className="absolute bottom-auto left-auto right-0 top-0 h-[500px] w-[500px] -translate-x-[20%] translate-y-[20%] rounded-full bg-primary/20 opacity-50 blur-[80px]"></div>
            <div className="absolute bottom-0 right-auto left-0 top-auto h-[500px] w-[500px] translate-x-[20%] -translate-y-[10%] rounded-full bg-secondary opacity-50 blur-[80px]"></div>
          </div>

          <Header />

          <main className="container mx-auto max-w-5xl px-4">
            <Hero />
            <ContextCost />
            <Solution />
            <TokenEconomics />
            <Playground />
            <QuickStart />
            <Faq />
            <DesignDecisions />
            <UseCases />
            <Contribute />
          </main>

          <Footer />
        </div>
      );
    }
  src/components/sections/Contribute.tsx: |-
    import { Section } from "@/components/Section";
    import { Card } from "@/components/ui/card";
    import { Button } from "@/components/ui/button";
    import { Github } from "lucide-react";
    import { contributeContent } from "@/content/sections.content";
    import { GITHUB_URL } from "@/lib/constants";

    export const Contribute = () => (
      <Section id="section-9">
        <Card className="bg-secondary/50 p-8 text-center md:p-12">
          <h2 className="text-3xl font-bold tracking-tight">
            {contributeContent.title}
          </h2>
          <p className="mx-auto mb-8 mt-2 max-w-2xl text-lg text-muted-foreground">
            {contributeContent.subtitle}
          </p>
          <a href={GITHUB_URL} target="_blank" rel="noopener noreferrer">
            <Button size="lg" variant="secondary">
              <Github className="mr-2 h-4 w-4" /> {contributeContent.buttonText}
            </Button>
          </a>
        </Card>
      </Section>
    );
  src/components/Header.tsx: |-
    import { Button } from "@/components/ui/button";
    import { Github, MessageSquare } from "lucide-react";
    import { DISCORD_URL, GITHUB_URL } from "@/lib/constants";

    export const Header = () => (
      <header className="sticky top-0 z-50 w-full border-b border-border/40 bg-background/80 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container flex h-16 max-w-screen-2xl items-center justify-between">
          <a href="#" className="flex items-center space-x-2.5">
            <span className="-translate-y-0.5 text-2xl font-black text-primary">◮</span>
            <span className="font-bold">SCN</span>
            <span className="rounded-full border border-primary/50 bg-primary/10 px-2 py-0.5 text-xs font-medium text-primary">
              Open Source
            </span>
          </a>
          <div className="flex items-center gap-2">
            <a href={DISCORD_URL} target="_blank" rel="noopener noreferrer">
              <Button variant="outline" size="sm">
                <MessageSquare className="mr-2 h-4 w-4" />
                Discord
              </Button>
            </a>
            <a href={GITHUB_URL} target="_blank" rel="noopener noreferrer">
              <Button variant="outline" size="sm">
                <Github className="mr-2 h-4 w-4" />
                GitHub
              </Button>
            </a>
          </div>
        </div>
      </header>
    );
  src/components/sections/DesignDecisions.tsx: |-
    import { Section } from "@/components/Section";
    import {
      Card,
      CardContent,
      CardHeader,
      CardTitle,
    } from "@/components/ui/card";
    import { designDecisionsContent } from "@/content/sections.content";

    export const DesignDecisions = () => (
      <Section id="section-7">
        <div className="mb-12 text-center">
          <h2 className="text-3xl font-bold tracking-tight">
            {designDecisionsContent.title}
          </h2>
          <p className="mx-auto mt-2 max-w-2xl text-lg text-muted-foreground">
            {designDecisionsContent.subtitle}
          </p>
        </div>
        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
          {designDecisionsContent.cards.map((card, index) => (
            <Card key={index}>
              <CardHeader>
                <card.icon className="mb-2 h-8 w-8 text-primary" />
                <CardTitle>{card.title}</CardTitle>
              </CardHeader>
              <CardContent>{card.content}</CardContent>
            </Card>
          ))}
        </div>
      </Section>
    );
  src/components/CodeBlock.tsx: |-
    import { Button } from "@/components/ui/button";
    import { cn } from "@/lib/utils";
    import { Check, Copy } from "lucide-react";
    import { useCopyToClipboard } from "@/hooks/useCopyToClipboard.hook";

    export const CodeBlock = ({
      children,
      lang = "bash",
      className,
    }: {
      children: string;
      lang?: string;
      className?: string;
    }) => {
      const { isCopied, copyToClipboard } = useCopyToClipboard();
      const textToCopy = children.trim();

      return (
        <div className="relative">
          <pre
            className={cn(
              "rounded-lg border bg-secondary p-4 font-mono text-sm whitespace-pre-wrap",
              className
            )}
          >
            <code className={`language-${lang}`}>{textToCopy}</code>
          </pre>
          <Button
            variant="ghost"
            size="icon"
            className="absolute right-2 top-2 h-8 w-8"
            onClick={() => copyToClipboard(textToCopy)}
            disabled={!textToCopy}
          >
            {isCopied ? (
              <Check className="h-4 w-4 text-green-500" />
            ) : (
              <Copy className="h-4 w-4" />
            )}
          </Button>
        </div>
      );
    };
  src/components/sections/Faq.tsx: |-
    import { Section } from "@/components/Section";
    import { faqContent } from "@/content/sections.content";

    export const Faq = () => (
      <Section id="section-6">
        <div className="mb-12 text-center">
          <h2 className="text-3xl font-bold tracking-tight">
            {faqContent.title}
          </h2>
        </div>
        <div className="max-w-3xl mx-auto space-y-8">
          {faqContent.questions.map((faq, index) => (
            <div className="border-t pt-4" key={index}>
              <p className="font-semibold text-lg">{faq.question}</p>
              <p className="text-muted-foreground mt-1">{faq.answer}</p>
            </div>
          ))}
        </div>
      </Section>
    );
  src/components/sections/Hero.tsx: |-
    import { Button } from "@/components/ui/button";
    import {
      Card,
      CardContent,
      CardHeader,
      CardTitle,
    } from "@/components/ui/card";
    import { ArrowDown, ArrowRight, Terminal, Zap } from "lucide-react";
    import { CodeBlock } from "@/components/CodeBlock";
    import { heroContent } from "@/content/sections.content";
    import { PLAYGROUND_URL } from "@/lib/constants";

    export const Hero = () => (
      <section className="grid items-center gap-12 pt-12 pb-24 sm:pt-16 sm:pb-32 lg:grid-cols-2">
        <div className="space-y-6 text-center lg:text-left">
          <h1 className="animate-fade-in text-4xl font-extrabold tracking-tighter opacity-0 md:text-6xl">
            <span className="bg-clip-text text-transparent bg-gradient-to-b from-foreground to-foreground/70">
              {heroContent.title}
            </span>{" "}
            <span className="inline-block whitespace-nowrap rounded-full bg-primary/10 px-4 py-2 align-middle text-3xl font-medium text-primary md:text-5xl">
              <span className="relative -top-[0.05em] text-2xl md:text-4xl">
                &lt;
              </span>
              {heroContent.highlightedTitle}
            </span>
          </h1>
          <p className="mx-auto max-w-2xl animate-fade-in text-lg text-muted-foreground opacity-0 [animation-delay:0.2s] md:text-xl lg:mx-0">
            {heroContent.subtitle}
          </p>
          <div className="flex animate-fade-in flex-col justify-center gap-4 opacity-0 [animation-delay:0.3s] sm:flex-row lg:justify-start">
            <a href="#section-5">
              <Button size="lg">
                {heroContent.getStartedButton}{" "}
                <Terminal className="ml-2 h-4 w-4" />
              </Button>
            </a>
            <a href={PLAYGROUND_URL} target="_blank" rel="noopener noreferrer">
              <Button variant="secondary" size="lg">
                {heroContent.playgroundButton}{" "}
                <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
            </a>
          </div>
        </div>
        <div className="relative rounded-xl border bg-gradient-to-b from-secondary/30 to-background p-4 lg:p-6">
          <Card className="bg-background/50 backdrop-blur-sm opacity-0 animate-slide-in-from-top [animation-delay:0.5s]">
            <CardHeader className="flex-row items-center justify-between p-4">
              <CardTitle className="text-base font-semibold text-muted-foreground">
                {heroContent.before.title}
              </CardTitle>
              <Zap className="h-5 w-5 text-destructive" />
            </CardHeader>
            <CardContent className="p-0">
              <CodeBlock lang="typescript" className="rounded-t-none border-0 bg-transparent p-4">{heroContent.before.code}</CodeBlock>
            </CardContent>
          </Card>

          <div className="my-6 flex animate-fade-in justify-center opacity-0 [animation-delay:0.7s]">
            <div className="flex h-10 w-10 animate-pulse items-center justify-center rounded-full bg-primary text-primary-foreground">
              <ArrowDown className="h-5 w-5" />
            </div>
          </div>

          <Card className="animate-glow animate-slide-in-from-bottom border-primary/50 bg-background/50 opacity-0 backdrop-blur-sm [animation-delay:0.9s]">
            <CardHeader className="flex-row items-center justify-between p-4">
              <CardTitle className="text-base font-semibold text-muted-foreground">
                {heroContent.after.title}
              </CardTitle>
              <Zap className="h-5 w-5 text-primary" />
            </CardHeader>
            <CardContent className="p-0">
              <CodeBlock lang="text" className="rounded-t-none border-0 bg-transparent p-4">{heroContent.after.code}</CodeBlock>
            </CardContent>
          </Card>
        </div>
      </section>
    );
  src/components/sections/Playground.tsx: |-
    import { Section } from "@/components/Section";
    import { Card } from "@/components/ui/card";
    import { Button } from "@/components/ui/button";
    import { ArrowRight } from "lucide-react";
    import { playgroundContent } from "@/content/sections.content";
    import { PLAYGROUND_URL } from "@/lib/constants";

    export const Playground = () => (
      <Section id="section-4">
        <Card className="bg-secondary/50 p-8 text-center md:p-12">
          <h2 className="text-3xl font-bold tracking-tight">
            {playgroundContent.title}
          </h2>
          <p className="text-lg text-muted-foreground mt-2 mb-8">
            {playgroundContent.subtitle}
          </p>
          <a href={PLAYGROUND_URL} target="_blank" rel="noopener noreferrer">
            <Button size="lg">
              {playgroundContent.buttonText}{" "}
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </a>
        </Card>
      </Section>
    );
  src/components/sections/ContextCost.tsx: |-
    import {
      Card,
      CardContent,
      CardHeader,
      CardTitle,
    } from "@/components/ui/card";
    import { Section } from "@/components/Section";
    import { contextCostContent } from "@/content/sections.content";

    export const ContextCost = () => (
      <Section id="section-1">
        <div className="mb-12 text-center">
          <h2 className="text-3xl font-bold tracking-tight">
            {contextCostContent.title}
          </h2>
          <p className="mx-auto mt-2 max-w-2xl text-lg text-muted-foreground">
            {contextCostContent.subtitle}
          </p>
        </div>
        <div className="grid md:grid-cols-3 gap-8">
          {contextCostContent.cards.map((card, index) => (
            <Card key={index}>
              <CardHeader>
                <card.icon className="mb-2 h-8 w-8 text-primary" />
                <CardTitle>{card.title}</CardTitle>
              </CardHeader>
              <CardContent>{card.content}</CardContent>
            </Card>
          ))}
        </div>
      </Section>
    );
  src/components/sections/QuickStart.tsx: |-
    import { Section } from "@/components/Section";
    import { CodeBlock } from "@/components/CodeBlock";
    import { quickStartContent } from "@/content/sections.content";

    export const QuickStart = () => (
      <Section id="section-5">
        <div className="mb-12 text-center">
          <h2 className="text-3xl font-bold tracking-tight">
            {quickStartContent.title}
          </h2>
          <p className="text-lg text-muted-foreground mt-2">
            {quickStartContent.subtitle}
          </p>
        </div>
        <CodeBlock>{quickStartContent.code}</CodeBlock>
      </Section>
    );
  src/components/sections/UseCases.tsx: |-
    import { Section } from "@/components/Section";
    import { InlineCode } from "@/components/InlineCode";
    import { Card, CardContent } from "@/components/ui/card";
    import {
      Table,
      TableBody,
      TableCell,
      TableHead,
      TableHeader,
      TableRow,
    } from "@/components/ui/table";
    import { useCasesContent } from "@/content/sections.content";

    export const UseCases = () => (
      <Section id="section-8">
        <div className="mb-12 text-center">
          <h2 className="text-3xl font-bold tracking-tight">
            {useCasesContent.title}
          </h2>
          <p className="text-lg text-muted-foreground mt-2">
            {useCasesContent.subtitle}
          </p>
        </div>
        <Card>
          <CardContent className="p-0">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-1/3 sm:w-[200px]">Scenario</TableHead>
                  <TableHead>Example Prompt</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {useCasesContent.prompts.map((useCase, index) => (
                  <TableRow key={index}>
                    <TableCell className="font-medium">{useCase.scenario}</TableCell>
                    <TableCell>
                      <InlineCode>{useCase.prompt}</InlineCode>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </Section>
    );
  src/components/sections/TokenEconomics.tsx: |-
    import { Section } from "@/components/Section";
    import { Card, CardContent } from "@/components/ui/card";
    import {
      Table,
      TableBody,
      TableCell,
      TableHead,
      TableHeader,
      TableRow,
    } from "@/components/ui/table";
    import { tokenEconomicsContent } from "@/content/sections.content";
    import { cn } from "@/lib/utils";

    export const TokenEconomics = () => (
      <Section id="section-3">
        <div className="mb-12 text-center">
          <h2 className="text-3xl font-bold tracking-tight">
            {tokenEconomicsContent.title}
          </h2>
          <p className="text-lg text-muted-foreground mt-2">
            {tokenEconomicsContent.subtitle}
          </p>
        </div>
        <Card>
          <CardContent className="p-0">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Representation</TableHead>
                  <TableHead>Tokens</TableHead>
                  <TableHead>% of 4k Window</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {tokenEconomicsContent.table.map((row, index) => (
                  <TableRow
                    key={index}
                    className={cn(row.highlight && "bg-primary/10 hover:bg-primary/20")}
                  >
                    <TableCell className={cn(row.highlight && "font-bold text-primary")}>{row.representation}</TableCell>
                    <TableCell className={cn(row.highlight && "font-bold text-primary")}>{row.tokens}</TableCell>
                    <TableCell className={cn(row.highlight && "font-bold text-primary")}>{row.window}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </Section>
    );
  src/content/sections.content.tsx: |
    import {
      Box,
      BrainCircuit,
      GitMerge,
      Hash,
      Network,
      Puzzle,
      Scissors,
      SlidersHorizontal,
      Smile,
      Workflow,
      Zap,
    } from "lucide-react";
    import { InlineCode } from "@/components/InlineCode";

    export const contextCostContent = {
      title: "The High Cost of Context",
      subtitle:
        "LLMs are powerful, but their attention is expensive and limited. Traditional methods of providing context just don't scale.",
      cards: [
        {
          icon: Zap,
          title: "Token Limits",
          content: (
            <>
              Context windows are tiny. Pasting <InlineCode>/src</InlineCode>{" "}
              consumes your entire budget before you've even asked a question.
            </>
          ),
        },
        {
          icon: BrainCircuit,
          title: "Signal vs. Noise",
          content:
            "Models don't need semicolons, they need the dependency graph—what talks to what, and who calls whom.",
        },
        {
          icon: Workflow,
          title: "Broken Workflow",
          content: (
            <>
              You don't need another IDE. You need a 1-second command that turns{" "}
              <em>“here’s my repo”</em> into <em>“here’s the summary”</em>.
            </>
          ),
        },
      ],
    };

    export const solutionContent = {
      title: "The Solution: Symbolic Context Notation",
      subtitle:
        "A zero-config, WASM-powered static analyzer that spits out a dense, emoji-rich, token-counted summary of your project.",
      cliCommand: `npx scn "src/**/*.{ts,tsx}" --exclude="**/*.test.ts" --preset=compact`,
      exampleOutput: `§1 src/main.tsx
      + ◇ App (1)
      + ~ fetchUsers (2)
        > 2, 3

    §2 src/services/api.ts
      ~ getUser (1) ...!
        < 1
        > 3

    §3 src/types.ts
      + {} User (1)
        + @ id: #string
        + @ name: #string`,
      legend: [
        { symbol: "§", meaning: "File header (id + path)" },
        { symbol: "+ / -", meaning: "Exported / Private symbol" },
        { symbol: "◇ ~ {}", meaning: "Class, Function, Interface, JSX element" },
        { symbol: "> / <", meaning: "Outgoing / Incoming call or import" },
        { symbol: "... ! o", meaning: "Async, Throws, Pure function" },
      ],
    };

    export const tokenEconomicsContent = {
      title: "Token Economics",
      subtitle: "Fit 10x more context into every prompt.",
      table: [
        { representation: "Raw Source", tokens: "18,700", window: "467% ❌" },
        { representation: "Minified", tokens: "12,100", window: "302% ❌" },
        { representation: "AST JSON", tokens: "9,400", window: "235% ❌" },
        {
          representation: "SCN Compact",
          tokens: "380",
          window: "9% ✅",
          highlight: true,
        },
      ],
    };

    export const playgroundContent = {
      title: "Live Demo Playground",
      subtitle:
        "Drag-and-drop a folder, move the slider, and watch the map re-shape in real time.",
      buttonText: "Try the Playground",
    };

    export const quickStartContent = {
      title: "CLI Quick Start",
      subtitle: "Get started in under a minute.",
      code: `# global install
    npm i -g scn            # or yarn/pnpm/bun

    # basic
    scn "src/**/*.{ts,tsx}" --output map.scn

    # monorepo
    scn "apps/*/src/**/*" --exclude="**/*.stories.tsx" --max-workers=8

    # watch mode
    scn "src/**/*" --watch --preset=minimal`,
    };

    export const faqContent = {
      title: "Frequently Asked Questions",
      questions: [
        {
          question: "Does GPT really understand the icons?",
          answer:
            "Yes. They are single Unicode chars and appear thousands of times in training data (Unicode chess, cards, etc.).",
        },
        {
          question: (
            <>
              Why not just <InlineCode>ctags</InlineCode> +{" "}
              <InlineCode>grep</InlineCode>?
            </>
          ),
          answer:
            "ctags is per-file, has no concept of cross-file edges, offers no token counting, and has no browser-based playground.",
        },
        {
          question: "What happens when a language adds new syntax?",
          answer:
            "Only if the underlying tree-sitter grammar breaks, which is usually fixed upstream within days. Our queries are tiny and easy to patch.",
        },
        {
          question: "Is my proprietary code safe?",
          answer:
            "Everything runs locally on your machine. The WASM is loaded from your domain; there is no telemetry and no cloud dependency.",
        },
      ],
    };

    export const designDecisionsContent = {
      title: "Design Decisions",
      subtitle:
        "Built on a foundation of modern, performant, and portable technologies.",
      cards: [
        {
          icon: GitMerge,
          title: "tree-sitter",
          content: "Incremental, error-tolerant, multi-language parsing.",
        },
        {
          icon: Box,
          title: "WASM",
          content: "Same binary runs in browser, edge, or server.",
        },
        {
          icon: Puzzle,
          title: "No Bundler Magic",
          content: (
            <>
              ES modules only, <InlineCode>?module</InlineCode> CDN link works.
            </>
          ),
        },
        {
          icon: Scissors,
          title: "No AST Dump",
          content: (
            <>
              We throw away <em>statements</em> and keep <em>symbols + edges</em>.
            </>
          ),
        },
        {
          icon: Network,
          title: "Topological Sort",
          content: "GPT sees bottom-up dependencies, which reduces hallucination.",
        },
        {
          icon: Smile,
          title: "Stable Icon Set",
          content: "Single Unicode char, token-efficient, and familiar to models.",
        },
        {
          icon: Hash,
          title: "Hierarchical IDs",
          content:
            'Lets models reason about "file 3 symbol 2" without name clashes.',
        },
        {
          icon: SlidersHorizontal,
          title: "Preset System",
          content: "Hard-coded filters so you don’t need a complex configuration.",
        },
      ],
    };

    export const useCasesContent = {
      title: "Common Use-Cases",
      subtitle:
        "From refactoring to on-boarding, SCN accelerates your workflow.",
      prompts: [
        {
          scenario: "Refactor Epic",
          prompt: "SCN + “move auth logic to new package”",
        },
        { scenario: "Code Review", prompt: "SCN + “any circular deps?”" },
        {
          scenario: "Add Feature",
          prompt: "SCN + “add Stripe webhook handler following same pattern”",
        },
        {
          scenario: "Migration",
          prompt: "SCN + “convert from Express to Fastify”",
        },
        { scenario: "On-boarding", prompt: "SCN + “explain data flow”" },
      ],
    };

    export const contributeContent = {
      title: "Contribute to SCN",
      subtitle:
        "Help us map the world's code. Add a language, improve heuristics, or beat our performance benchmarks. All contributions are welcome.",
      buttonText: "View on GitHub",
    };

    export const heroContent = {
      title: "Understand any codebase in",
      highlightedTitle: "1k tokens.",
      subtitle: (
        <>
          SCN creates a dense, token-efficient cheat-sheet for your LLM.{" "}
          <br className="hidden md:block" />
          Paste it in, and watch your AI refactor, review, or port code without
          ever seeing the source.
        </>
      ),
      getStartedButton: "Get Started",
      playgroundButton: "Live Playground",
      before: {
        title: "BEFORE: 300+ tokens",
        code: `export class ApiClient {
      constructor(private apiKey: string) {}

      async fetchUsers(page: number): Promise<User[]> {
        const res = await fetch(\`/api/users?page=\${page}\`, {
          headers: { 'X-API-KEY': this.apiKey }
        });
        if (!res.ok) throw new Error('API Error');
        return res.json();
      }
    }`,
      },
      after: {
        title: "AFTER: 38 tokens",
        code: `§1 src/api.ts
    + ◇ ApiClient
      - @ apiKey: #string
      + o constructor
      + ~ fetchUsers ...!
        > User`,
      },
    };
  src/components/ui/button.constants.ts: |-
    import { cva } from "class-variance-authority"

    export const buttonVariants = cva(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
      {
        variants: {
          variant: {
            default: "bg-primary text-primary-foreground hover:bg-primary/90",
            destructive:
              "bg-destructive text-destructive-foreground hover:bg-destructive/90",
            outline:
              "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
            secondary:
              "bg-secondary text-secondary-foreground hover:bg-secondary/80",
            ghost: "hover:bg-accent hover:text-accent-foreground",
            link: "text-primary underline-offset-4 hover:underline",
          },
          size: {
            default: "h-10 px-4 py-2",
            sm: "h-9 rounded-md px-3",
            lg: "h-11 rounded-md px-8",
            icon: "h-10 w-10",
          },
        },
        defaultVariants: {
          variant: "default",
          size: "default",
        },
      }
    )
  src/components/ui/card.tsx: >-
    import * as React from "react"


    import { cn } from "@/lib/utils"


    const Card = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => (
      <div
        ref={ref}
        className={cn(
          "rounded-lg border bg-card text-card-foreground shadow-sm",
          className
        )}
        {...props}
      />
    ))

    Card.displayName = "Card"


    const CardHeader = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => (
      <div
        ref={ref}
        className={cn("flex flex-col space-y-1.5 p-6", className)}
        {...props}
      />
    ))

    CardHeader.displayName = "CardHeader"


    const CardTitle = React.forwardRef<
      HTMLParagraphElement,
      React.HTMLAttributes<HTMLHeadingElement>
    >(({ className, ...props }, ref) => (
      <h3
        ref={ref}
        className={cn(
          "text-2xl font-semibold leading-none tracking-tight",
          className
        )}
        {...props}
      />
    ))

    CardTitle.displayName = "CardTitle"


    const CardDescription = React.forwardRef<
      HTMLParagraphElement,
      React.HTMLAttributes<HTMLParagraphElement>
    >(({ className, ...props }, ref) => (
      <p
        ref={ref}
        className={cn("text-sm text-muted-foreground", className)}
        {...props}
      />
    ))

    CardDescription.displayName = "CardDescription"


    const CardContent = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => (
      <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
    ))

    CardContent.displayName = "CardContent"


    const CardFooter = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => (
      <div
        ref={ref}
        className={cn("flex items-center p-6 pt-0", className)}
        {...props}
      />
    ))

    CardFooter.displayName = "CardFooter"


    export { Card, CardHeader, CardFooter, CardTitle, CardDescription,
    CardContent }
  src/hooks/useCopyToClipboard.hook.ts: |-
    import { useState, useCallback, useEffect } from "react";

    export const useCopyToClipboard = () => {
      const [isCopied, setIsCopied] = useState(false);

      const copyToClipboard = useCallback((text: string) => {
        if (!text) {
          return;
        }
        navigator.clipboard.writeText(text).then(() => {
          setIsCopied(true);
        });
      }, []);

      useEffect(() => {
        if (isCopied) {
          const timer = setTimeout(() => {
            setIsCopied(false);
          }, 2000);
          return () => clearTimeout(timer);
        }
      }, [isCopied]);

      return { isCopied, copyToClipboard };
    };
  src/components/ui/button.tsx: |-
    import * as React from "react"
    import { Slot } from "@radix-ui/react-slot"
    import { cn } from "@/lib/utils"
    import { buttonVariants } from "./button.constants"
    import type { ButtonProps } from "./button.types"

    const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
      ({ className, variant, size, asChild = false, ...props }, ref) => {
        const Comp = asChild ? Slot : "button"
        return (
          <Comp
            className={cn(buttonVariants({ variant, size, className }))}
            ref={ref}
            {...props}
          />
        )
      }
    )
    Button.displayName = "Button"

    export { Button, buttonVariants }
approved: false
linesAdded: 50
linesRemoved: 45
linesDifference: 95
gitCommittedAt: null
status: pending
id: 29
