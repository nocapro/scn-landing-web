uuid: d823cfc2-2eb4-472d-a60d-83b584d411be
projectId: scn-landing-web-gemini
createdAt: '2025-09-11T08:24:15.368Z'
gitCommitMsg: >-
  docs: align copy with language-agnostic SCN branding

  Updates the copywriting across the landing page to reflect the project's
  correct name "SCN" (instead of "scn-ts") and its language-agnostic
  capabilities.

  - Renames "scn-ts" to "SCN" in titles, descriptions, and CLI examples. -
  Replaces TypeScript-specific phrases like "any TypeScript repo" with
    more generic terms like "any codebase".
  - Updates the GitHub URL constant.
promptSummary: >-
  The user requested to adjust the copywriting to change the project name from
  "scn-ts" to "SCN" and make the content language-agnostic instead of
  TypeScript-focused.
reasoning:
  - >-
    Based on your request to adjust the copywriting, I will update the project
    name from "scn-ts" to "SCN" and make the language more generic to reflect
    its language-agnostic nature, rather than focusing solely on TypeScript.
  - '### Step 1: Update Web Manifest'
  - >-
    I'll start by updating the `site.webmanifest` to change the application name
    and description.
  - '### Step 2: Update HTML Meta Tags'
  - >-
    Next, I'll modify the main `index.html` file to update the title and various
    meta tags for SEO and social sharing, ensuring the copy is consistent with
    the new branding.
  - '### Step 3: Update GitHub URL Constant'
  - >-
    To maintain consistency, I'll update the GitHub URL constant, assuming the
    repository will be renamed to match the new project name.
  - '### Step 4: Revise Content File'
  - >-
    Finally, I'll go through the main content file and update all instances of
    "scn-ts" to "SCN" and revise the copy to be language-agnostic. This includes
    CLI commands, taglines, and FAQ questions.
  - >-
    These changes should align the entire site with the new, broader branding
    for SCN.
operations:
  - type: write
    path: public/site.webmanifest
    content: |+
      --- public/site.webmanifest
      +++ public/site.webmanifest
      @@ -1,6 +1,6 @@
       {
      -  "name": "SCN-TS",
      -  "short_name": "SCN-TS",
      -  "description": "Symbolic Context Notation for TypeScript",
      +  "name": "SCN",
      +  "short_name": "SCN",
      +  "description": "Symbolic Context Notation for Code",
         "start_url": "/",
         "display": "standalone",
         "background_color": "#020817",

    patchStrategy: standard-diff
  - type: write
    path: index.html
    content: >+
      --- index.html

      +++ index.html

      @@ -4,37 +4,37 @@
           <meta name="viewport" content="width=device-width, initial-scale=1.0" />
       
           <!-- Primary Meta Tags -->
      -    <title>SCN-TS | Symbolic Context Notation for TypeScript</title>

      -    <meta name="description" content="SCN-TS creates a dense,
      token-efficient cheat-sheet for your TypeScript/JavaScript projects.
      Understand any repo in 400 tokens, and help your LLM refactor, review, or
      port code without ever seeing the source." />

      +    <title>SCN | Symbolic Context Notation</title>

      +    <meta name="description" content="SCN creates a dense,
      token-efficient cheat-sheet for your codebase. Understand any repo in 400
      tokens, and help your LLM refactor, review, or port code without ever
      seeing the source." />
           <link rel="canonical" href="https://www.scn-ts.dev/" />
       
           <!-- Favicons -->
           <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
           <link rel="apple-touch-icon" href="/favicon.svg" />
           <link rel="manifest" href="/site.webmanifest" />
       
           <!-- Open Graph / Facebook -->
           <meta property="og:type" content="website" />
           <meta property="og:url" content="https://www.scn-ts.dev/" />
      -    <meta property="og:title" content="SCN-TS: Understand any TypeScript
      repo in 400 tokens." />

      -    <meta property="og:description" content="SCN-TS creates a dense,
      token-efficient cheat-sheet for your TypeScript/JavaScript projects.
      Understand any repo in 400 tokens, and help your LLM refactor, review, or
      port code without ever seeing the source." />

      +    <meta property="og:title" content="SCN: Understand any codebase in
      400 tokens." />

      +    <meta property="og:description" content="SCN creates a dense,
      token-efficient cheat-sheet for your codebase. Understand any repo in 400
      tokens, and help your LLM refactor, review, or port code without ever
      seeing the source." />
           <meta property="og:image" content="https://www.scn-ts.dev/og.png" />
      -    <meta property="og:site_name" content="SCN-TS" />

      +    <meta property="og:site_name" content="SCN" />
       
           <!-- Twitter -->
           <meta property="twitter:card" content="summary_large_image" />
           <meta property="twitter:url" content="https://www.scn-ts.dev/" />
      -    <meta property="twitter:title" content="SCN-TS: Understand any
      TypeScript repo in 400 tokens." />

      -    <meta property="twitter:description" content="SCN-TS creates a dense,
      token-efficient cheat-sheet for your TypeScript/JavaScript projects.
      Understand any repo in 400 tokens, and help your LLM refactor, review, or
      port code without ever seeing the source." />

      +    <meta property="twitter:title" content="SCN: Understand any codebase
      in 400 tokens." />

      +    <meta property="twitter:description" content="SCN creates a dense,
      token-efficient cheat-sheet for your codebase. Understand any repo in 400
      tokens, and help your LLM refactor, review, or port code without ever
      seeing the source." />
           <meta property="twitter:image" content="https://www.scn-ts.dev/og.png" />
       
           <!-- JSON-LD Schema -->
           <script type="application/ld+json">
           {
             "@context": "https://schema.org",
             "@type": "SoftwareApplication",
      -      "name": "SCN-TS",

      +      "name": "SCN",
             "applicationCategory": "DeveloperApplication",
             "operatingSystem": "Cross-platform",
             "description": "A zero-config, WASM-powered static analyzer that spits out a dense, emoji-rich, token-counted summary of your project.",

    patchStrategy: standard-diff
  - type: write
    path: src/lib/constants.ts
    content: |+
      --- src/lib/constants.ts
      +++ src/lib/constants.ts
      @@ -1,4 +1,4 @@
      -export const GITHUB_URL = "https://github.com/nocapro/scn-ts";
      +export const GITHUB_URL = "https://github.com/nocapro/scn";
       export const PLAYGROUND_URL = "https://pg.scn.noca.pro";
       export const NOCAPRO_URL = "https://www.noca.pro";
       export const DISCORD_URL = "https://discord.gg/your-invite";

    patchStrategy: standard-diff
  - type: write
    path: src/content/sections.content.tsx
    content: >+
      --- src/content/sections.content.tsx

      +++ src/content/sections.content.tsx

      @@ -48,7 +48,7 @@
         title: "The Solution: Symbolic Context Notation",
         subtitle:
           "A zero-config, WASM-powered static analyzer that spits out a dense, emoji-rich, token-counted summary of your project.",
      -  cliCommand: `npx scn-ts "src/**/*.{ts,tsx}" --exclude="**/*.test.ts"
      --preset=compact`,

      +  cliCommand: `npx scn "src/**/*.{ts,tsx}" --exclude="**/*.test.ts"
      --preset=compact`,
         exampleOutput: `§1 src/main.tsx
         + ◇ App (1)
         + ~ fetchUsers (2)
      @@ -87,17 +87,17 @@
         title: "CLI Quick Start",
         subtitle: "Get started in under a minute.",
         code: `# global install
      -npm i -g scn-ts            # or yarn/pnpm/bun

      +npm i -g scn            # or yarn/pnpm/bun
       
       # basic
      -scn-ts "src/**/*.{ts,tsx}" --output map.scn

      +scn "src/**/*.{ts,tsx}" --output map.scn
       
       # monorepo
      -scn-ts "apps/*/src/**/*" --exclude="**/*.stories.tsx" --max-workers=8

      +scn "apps/*/src/**/*" --exclude="**/*.stories.tsx" --max-workers=8
       
       # watch mode
      -scn-ts "src/**/*" --watch --preset=minimal`,

      +scn "src/**/*" --watch --preset=minimal`,
       };
       
       export const faqContent = {
      @@ -118,7 +118,7 @@
               "ctags is per-file, has no concept of cross-file edges, offers no token counting, and has no browser-based playground.",
           },
           {
      -      question: "Will you break when TS 5.7 adds new syntax?",

      +      question: "What happens when a language adds new syntax?",
             answer:
               "Only if the underlying tree-sitter grammar breaks, which is usually fixed upstream within days. Our queries are tiny and easy to patch.",
           },
      @@ -181,7 +181,7 @@
       export const useCasesContent = {
         title: "Common Use-Cases",
         subtitle:
      -    "From refactoring to on-boarding, scn-ts accelerates your workflow.",

      +    "From refactoring to on-boarding, SCN accelerates your workflow.",
         prompts: [
           {
             scenario: "Refactor Epic",
      @@ -205,7 +205,7 @@
       };
       
       export const heroContent = {
      -  title: "Understand any TypeScript repo in 400 tokens.",

      +  title: "Understand any codebase in 400 tokens.",
         subtitle: (
           <>
             SCN creates a dense, token-efficient cheat-sheet for your LLM.{" "}

    patchStrategy: standard-diff
snapshot:
  public/site.webmanifest: |-
    {
      "name": "SCN-TS",
      "short_name": "SCN-TS",
      "description": "Symbolic Context Notation for TypeScript",
      "start_url": "/",
      "display": "standalone",
      "background_color": "#020817",
      "theme_color": "#8b5cf6",
      "icons": [
        {
          "src": "/favicon.svg",
          "sizes": "any",
          "type": "image/svg+xml"
        }
      ]
    }
  index.html: |-
    <!doctype html>
    <html lang="en" class="dark">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />

        <!-- Primary Meta Tags -->
        <title>SCN-TS | Symbolic Context Notation for TypeScript</title>
        <meta name="description" content="SCN-TS creates a dense, token-efficient cheat-sheet for your TypeScript/JavaScript projects. Understand any repo in 400 tokens, and help your LLM refactor, review, or port code without ever seeing the source." />
        <link rel="canonical" href="https://www.scn-ts.dev/" />

        <!-- Favicons -->
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <link rel="apple-touch-icon" href="/favicon.svg" />
        <link rel="manifest" href="/site.webmanifest" />

        <!-- Open Graph / Facebook -->
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://www.scn-ts.dev/" />
        <meta property="og:title" content="SCN-TS: Understand any TypeScript repo in 400 tokens." />
        <meta property="og:description" content="SCN-TS creates a dense, token-efficient cheat-sheet for your TypeScript/JavaScript projects. Understand any repo in 400 tokens, and help your LLM refactor, review, or port code without ever seeing the source." />
        <meta property="og:image" content="https://www.scn-ts.dev/og.png" />
        <meta property="og:site_name" content="SCN-TS" />

        <!-- Twitter -->
        <meta property="twitter:card" content="summary_large_image" />
        <meta property="twitter:url" content="https://www.scn-ts.dev/" />
        <meta property="twitter:title" content="SCN-TS: Understand any TypeScript repo in 400 tokens." />
        <meta property="twitter:description" content="SCN-TS creates a dense, token-efficient cheat-sheet for your TypeScript/JavaScript projects. Understand any repo in 400 tokens, and help your LLM refactor, review, or port code without ever seeing the source." />
        <meta property="twitter:image" content="https://www.scn-ts.dev/og.png" />

        <!-- JSON-LD Schema -->
        <script type="application/ld+json">
        {
          "@context": "https://schema.org",
          "@type": "SoftwareApplication",
          "name": "SCN-TS",
          "applicationCategory": "DeveloperApplication",
          "operatingSystem": "Cross-platform",
          "description": "A zero-config, WASM-powered static analyzer that spits out a dense, emoji-rich, token-counted summary of your project.",
          "url": "https://www.scn-ts.dev/",
          "offers": {
            "@type": "Offer",
            "price": "0",
            "priceCurrency": "USD"
          },
          "author": {
            "@type": "Organization",
            "name": "SCN contributors"
          }
        }
        </script>
      </head>
      <body>
        <div id="root"></div>
        <script type="module" src="/src/main.tsx"></script>
      </body>
    </html>
  src/lib/constants.ts: |-
    export const GITHUB_URL = "https://github.com/nocapro/scn-ts";
    export const PLAYGROUND_URL = "https://pg.scn.noca.pro";
    export const NOCAPRO_URL = "https://www.noca.pro";
    export const DISCORD_URL = "https://discord.gg/your-invite";
  src/content/sections.content.tsx: |-
    import {
      Box,
      BrainCircuit,
      GitMerge,
      Hash,
      Network,
      Puzzle,
      Scissors,
      SlidersHorizontal,
      Smile,
      Workflow,
      Zap,
    } from "lucide-react";
    import { InlineCode } from "@/components/InlineCode";

    export const contextCostContent = {
      title: "The High Cost of Context",
      subtitle:
        "LLMs are powerful, but their attention is expensive and limited. Traditional methods of providing context just don't scale.",
      cards: [
        {
          icon: Zap,
          title: "Token Limits",
          content: (
            <>
              Context windows are tiny. Pasting <InlineCode>/src</InlineCode>{" "}
              consumes your entire budget before you've even asked a question.
            </>
          ),
        },
        {
          icon: BrainCircuit,
          title: "Signal vs. Noise",
          content:
            "Models don't need semicolons, they need the dependency graph—what talks to what, and who calls whom.",
        },
        {
          icon: Workflow,
          title: "Broken Workflow",
          content: (
            <>
              You don't need another IDE. You need a 1-second command that turns{" "}
              <em>“here’s my repo”</em> into <em>“here’s the summary”</em>.
            </>
          ),
        },
      ],
    };

    export const solutionContent = {
      title: "The Solution: Symbolic Context Notation",
      subtitle:
        "A zero-config, WASM-powered static analyzer that spits out a dense, emoji-rich, token-counted summary of your project.",
      cliCommand: `npx scn-ts "src/**/*.{ts,tsx}" --exclude="**/*.test.ts" --preset=compact`,
      exampleOutput: `§1 src/main.tsx
      + ◇ App (1)
      + ~ fetchUsers (2)
        > 2, 3

    §2 src/services/api.ts
      ~ getUser (1) ...!
        < 1
        > 3

    §3 src/types.ts
      + {} User (1)
        + @ id: #string
        + @ name: #string`,
      legend: [
        { symbol: "§", meaning: "File header (id + path)" },
        { symbol: "+ / -", meaning: "Exported / Private symbol" },
        { symbol: "◇ ~ {}", meaning: "Class, Function, Interface, JSX element" },
        { symbol: "> / <", meaning: "Outgoing / Incoming call or import" },
        { symbol: "... ! o", meaning: "Async, Throws, Pure function" },
      ],
    };

    export const tokenEconomicsContent = {
      title: "Token Economics",
      subtitle: "Fit 10x more context into every prompt.",
      table: [
        { representation: "Raw Source", tokens: "18,700", window: "467% ❌" },
        { representation: "Minified", tokens: "12,100", window: "302% ❌" },
        { representation: "AST JSON", tokens: "9,400", window: "235% ❌" },
        {
          representation: "SCN Compact",
          tokens: "380",
          window: "9% ✅",
          highlight: true,
        },
      ],
    };

    export const playgroundContent = {
      title: "Live Demo Playground",
      subtitle:
        "Drag-and-drop a folder, move the slider, and watch the map re-shape in real time.",
      buttonText: "Try the Playground",
    };

    export const quickStartContent = {
      title: "CLI Quick Start",
      subtitle: "Get started in under a minute.",
      code: `# global install
    npm i -g scn-ts            # or yarn/pnpm/bun

    # basic
    scn-ts "src/**/*.{ts,tsx}" --output map.scn

    # monorepo
    scn-ts "apps/*/src/**/*" --exclude="**/*.stories.tsx" --max-workers=8

    # watch mode
    scn-ts "src/**/*" --watch --preset=minimal`,
    };

    export const faqContent = {
      title: "Frequently Asked Questions",
      questions: [
        {
          question: "Does GPT really understand the icons?",
          answer:
            "Yes. They are single Unicode chars and appear thousands of times in training data (Unicode chess, cards, etc.). We prompt-engineered once and never looked back.",
        },
        {
          question: (
            <>
              Why not just <InlineCode>ctags</InlineCode> +{" "}
              <InlineCode>grep</InlineCode>?
            </>
          ),
          answer:
            "ctags is per-file, has no concept of cross-file edges, offers no token counting, and has no browser-based playground.",
        },
        {
          question: "Will you break when TS 5.7 adds new syntax?",
          answer:
            "Only if the underlying tree-sitter grammar breaks, which is usually fixed upstream within days. Our queries are tiny and easy to patch.",
        },
        {
          question: "Is my proprietary code safe?",
          answer:
            "Everything runs locally on your machine. The WASM is loaded from your domain; there is no telemetry and no cloud dependency.",
        },
      ],
    };

    export const designDecisionsContent = {
      title: "Design Decisions",
      subtitle:
        "Built on a foundation of modern, performant, and portable technologies.",
      cards: [
        {
          icon: GitMerge,
          title: "tree-sitter",
          content: "Incremental, error-tolerant, multi-language parsing.",
        },
        {
          icon: Box,
          title: "WASM",
          content: "Same binary runs in browser, edge, or server.",
        },
        {
          icon: Puzzle,
          title: "No Bundler Magic",
          content: (
            <>
              ES modules only, <InlineCode>?module</InlineCode> CDN link works.
            </>
          ),
        },
        {
          icon: Scissors,
          title: "No AST Dump",
          content: (
            <>
              We throw away <em>statements</em> and keep <em>symbols + edges</em>.
            </>
          ),
        },
        {
          icon: Network,
          title: "Topological Sort",
          content: "GPT sees bottom-up dependencies, which reduces hallucination.",
        },
        {
          icon: Smile,
          title: "Stable Icon Set",
          content: "Single Unicode char, token-efficient, and familiar to models.",
        },
        {
          icon: Hash,
          title: "Hierarchical IDs",
          content:
            'Lets models reason about "file 3 symbol 2" without name clashes.',
        },
        {
          icon: SlidersHorizontal,
          title: "Preset System",
          content: "Hard-coded filters so you don’t need a complex configuration.",
        },
      ],
    };

    export const useCasesContent = {
      title: "Common Use-Cases",
      subtitle:
        "From refactoring to on-boarding, scn-ts accelerates your workflow.",
      prompts: [
        {
          scenario: "Refactor Epic",
          prompt: "SCN + “move auth logic to new package”",
        },
        { scenario: "Code Review", prompt: "SCN + “any circular deps?”" },
        {
          scenario: "Add Feature",
          prompt: "SCN + “add Stripe webhook handler following same pattern”",
        },
        {
          scenario: "Migration",
          prompt: "SCN + “convert from Express to Fastify”",
        },
        { scenario: "On-boarding", prompt: "SCN + “explain data flow”" },
      ],
    };

    export const contributeContent = {
      title: "Contribute to SCN",
      subtitle:
        "Help us map the world's code. Add a language, improve heuristics, or beat our performance benchmarks. All contributions are welcome.",
      buttonText: "View on GitHub",
    };

    export const heroContent = {
      title: "Understand any TypeScript repo in 400 tokens.",
      subtitle: (
        <>
          SCN creates a dense, token-efficient cheat-sheet for your LLM.{" "}
          <br className="hidden md:block" />
          Paste it in, and watch your AI refactor, review, or port code without
          ever seeing the source.
        </>
      ),
      getStartedButton: "Get Started",
      playgroundButton: "Live Playground",
      before: {
        title: "BEFORE: 300+ tokens",
        code: `export class ApiClient {
      constructor(private apiKey: string) {}

      async fetchUsers(page: number): Promise<User[]> {
        const res = await fetch(\`/api/users?page=\${page}\`, {
          headers: { 'X-API-KEY': this.apiKey }
        });
        if (!res.ok) throw new Error('API Error');
        return res.json();
      }
    }`,
      },
      after: {
        title: "AFTER: 38 tokens",
        code: `§1 src/api.ts
    + ◇ ApiClient
      - @ apiKey: #string
      + o constructor
      + ~ fetchUsers ...!
        > User`,
      },
    };
approved: false
linesAdded: 20
linesRemoved: 20
linesDifference: 40
gitCommittedAt: null
status: pending
id: 19
