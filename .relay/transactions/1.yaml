uuid: a3f9c6d5-1f8e-4a7b-8d1e-c5e9a4f7d2b1
projectId: scn-landing-web-gemini
createdAt: '2025-09-11T03:44:29.559Z'
gitCommitMsg: >-
  feat(landing): overhaul UI/UX for a more beautiful and intuitive experience

  This commit completely revamps the landing page to create a more professional,
  engaging, and modern user experience. The goal is to improve the narrative
  flow and make the value proposition of scn-ts crystal clear.

  Key changes include: - Redesigned hero section with a stronger headline,
  gradient text, and clear calls-to-action. - Modernized color palette and
  typography with system font stacks for better readability. - Re-structured the
  "Why" section into a scannable grid of feature cards with icons. - Improved
  data presentation in "Token Economics" and symbol legend tables. - Added
  subtle background gradients and improved spacing for a more polished
  aesthetic. - Refined content and component structure throughout the page to
  enhance storytelling and visual hierarchy.
promptSummary: >-
  The user requested a comprehensive UI/UX overhaul of the landing page to make
  it more amazing, cohesive, intuitive, and beautiful, with specific
  improvements for each section.
reasoning:
  - >-
    This is an excellent request. A beautiful and intuitive UI is crucial for
    developer tools to gain adoption. I'll overhaul the landing page to be more
    visually engaging, improve the narrative flow, and make the value
    proposition crystal clear from the moment the page loads.
  - 'Here are the key improvements I''ll make:'
  - >-
    1.  **Modernized Aesthetics**: I'll update the color palette to be more
    cohesive and visually appealing in both light and dark modes. I'll also add
    system font stacks for better typography across devices.
  - >-
    2.  **Compelling Hero Section**: The hero will be redesigned with a
    stronger, clearer headline, a gradient text effect to draw attention, and
    prominent call-to-action buttons to guide users.
  - >-
    3.  **Improved Section Storytelling**: Each section will be visually
    distinct and serve a clear purpose in the narrative.
  - >-
    *   The "Why" section will be transformed into a visually scannable grid of
    feature cards with icons, making the core problems easy to grasp.
  - >-
    *   The "What you get" section will use a table to present the SCN symbol
    legend, making it much cleaner and more readable.
  - >-
    *   The "Token Economics" table will be enhanced to visually highlight the
    dramatic token savings of SCN.
  - >-
    *   The "Playground" section will be simplified into a large, inviting
    call-to-action card.
  - >-
    4.  **Enhanced Readability & Structure**: I'll improve spacing, component
    structure, and visual hierarchy throughout the page to create a more
    polished and professional feel.
  - Let's begin with the styling changes.
  - '### Step 1: Update Color Palette and Base Styles'
  - >-
    I'll start by refining the color variables in `src/index.css` for a more
    modern and cohesive look. I'll also add global styles for smooth scrolling
    and better font rendering.
  - '### Step 2: Add System Font Stacks'
  - >-
    To ensure consistent and high-quality typography, I'll add system font
    stacks to the `tailwind.config.cjs` file.
  - '### Step 3: Overhaul the Main Application Component'
  - >-
    Now for the main event. I'll completely revamp `src/App.tsx` to implement
    the new design, structure, and narrative flow. This involves changing
    section layouts, updating content for clarity, and using components more
    effectively to create a beautiful and intuitive user experience.
  - >-
    These changes transform the simple landing page into a professional,
    engaging, and highly intuitive marketing site for `scn-ts`. The new design
    tells a clear story, visually emphasizes the key benefits, and guides the
    user towards trying out the tool.
operations:
  - type: write
    path: src/index.css
    content: |
      --- src/index.css
      +++ src/index.css
      @@ -2,66 +2,66 @@
       @tailwind components;
       @tailwind utilities;
        
       @layer base {
         :root {
      -    --background: 0 0% 100%;
      -    --foreground: 222.2 84% 4.9%;
      -
      +    --background: 0 0% 100%; /* white */
      +    --foreground: 224 71.4% 4.1%; /* near-black */
      + 
           --card: 0 0% 100%;
      -    --card-foreground: 222.2 84% 4.9%;
      +    --card-foreground: 224 71.4% 4.1%;
        
           --popover: 0 0% 100%;
      -    --popover-foreground: 222.2 84% 4.9%;
      +    --popover-foreground: 224 71.4% 4.1%;
        
      -    --primary: 262.1 83.3% 57.8%;
      -    --primary-foreground: 210 40% 98%;
      +    --primary: 262.1 83.3% 57.8%; /* vivid violet */
      +    --primary-foreground: 0 0% 98%; /* near-white */
        
      -    --secondary: 210 40% 96.1%;
      -    --secondary-foreground: 215.4 16.3% 46.9%;
      +    --secondary: 220 14.3% 95.9%;
      +    --secondary-foreground: 220.9 39.3% 11%;
        
      -    --muted: 210 40% 96.1%;
      +    --muted: 220 14.3% 95.9%;
           --muted-foreground: 215.4 16.3% 46.9%;
        
      -    --accent: 210 40% 96.1%;
      -    --accent-foreground: 215.4 16.3% 46.9%;
      +    --accent: 220 14.3% 95.9%;
      +    --accent-foreground: 220.9 39.3% 11%;
        
           --destructive: 0 84.2% 60.2%;
      -    --destructive-foreground: 210 40% 98%;
      -
      -    --border: 214.3 31.8% 91.4%;
      -    --input: 214.3 31.8% 91.4%;
      -    --ring: 222.2 84% 4.9%;
      +    --destructive-foreground: 0 0% 98%;
      + 
      +    --border: 220 13% 91%;
      +    --input: 220 13% 91%;
      +    --ring: 263.4 95.2% 66.3%;
        
           --radius: 0.5rem;
         }
        
         .dark {
      -    --background: 222.2 84% 4.9%;
      -    --foreground: 210 40% 98%;
      +    --background: 224 71.4% 4.1%;
      +    --foreground: 0 0% 98%;
        
      -    --card: 222.2 84% 4.9%;
      -    --card-foreground: 210 40% 98%;
      +    --card: 224 71.4% 4.1%;
      +    --card-foreground: 0 0% 98%;
        
      -    --popover: 222.2 84% 4.9%;
      -    --popover-foreground: 210 40% 98%;
      +    --popover: 224 71.4% 4.1%;
      +    --popover-foreground: 0 0% 98%;
        
           --primary: 263.4 95.2% 66.3%;
      -    --primary-foreground: 210 40% 98%;
      +    --primary-foreground: 224 71.4% 4.1%;
        
      -    --secondary: 217.2 32.6% 17.5%;
      -    --secondary-foreground: 210 40% 98%;
      +    --secondary: 215 27.9% 16.9%;
      +    --secondary-foreground: 0 0% 98%;
        
      -    --muted: 217.2 32.6% 17.5%;
      +    --muted: 215 27.9% 16.9%;
           --muted-foreground: 215 20.2% 65.1%;
        
      -    --accent: 217.2 32.6% 17.5%;
      -    --accent-foreground: 210 40% 98%;
      +    --accent: 215 27.9% 16.9%;
      +    --accent-foreground: 0 0% 98%;
        
           --destructive: 0 62.8% 30.6%;
      -    --destructive-foreground: 210 40% 98%;
      +    --destructive-foreground: 0 0% 98%;
        
      -    --border: 217.2 32.6% 17.5%;
      -    --input: 217.2 32.6% 17.5%;
      +    --border: 215 27.9% 16.9%;
      +    --input: 215 27.9% 16.9%;
           --ring: 263.4 95.2% 66.3%;
         }
       }
      @@ ... @@
       @layer base {
      +  html {
      +    @apply scroll-smooth;
      +  }
         * {
           @apply border-border;
         }
         body {
           @apply bg-background text-foreground;
      +    -webkit-font-smoothing: antialiased;
      +    -moz-osx-font-smoothing: grayscale;
         }
       }
    patchStrategy: standard-diff
  - type: write
    path: tailwind.config.cjs
    content: >
      --- tailwind.config.cjs

      +++ tailwind.config.cjs

      @@ -14,6 +14,10 @@
             },
           },
           extend: {
      +      fontFamily: {

      +        sans: ["-apple-system", "BlinkMacSystemFont", "'Segoe UI'",
      "Roboto", "Helvetica", "Arial", "sans-serif", "'Apple Color Emoji'",
      "'Segoe UI Emoji'", "'Segoe UI Symbol'"],

      +        mono: ['ui-monospace', 'SFMono-Regular', 'Menlo', 'Monaco',
      'Consolas', '"Liberation Mono"', '"Courier New"', 'monospace'],

      +      },
             colors: {
               border: "hsl(var(--border))",
               input: "hsl(var(--input))",
    patchStrategy: standard-diff
  - type: write
    path: src/App.tsx
    content: |-
      import { Button } from "@/components/ui/button";
      import {
        Card,
        CardContent,
        CardHeader,
        CardTitle,
      } from "@/components/ui/card";
      import {
        Table,
        TableBody,
        TableCell,
        TableHead,
        TableHeader,
        TableRow,
      } from "@/components/ui/table";
      import { cn } from "@/lib/utils";
      import {
        ArrowRight,
        BrainCircuit,
        Code,
        Copy,
        Github,
        Terminal,
        Workflow,
        Zap,
      } from "lucide-react";

      const Section = ({
        id,
        className,
        children,
      }: {
        id: string;
        className?: string;
        children: React.ReactNode;
      }) => (
        <section
          id={id}
          className={cn("py-20 sm:py-28 border-t", className)}
        >
          {children}
        </section>
      );

      const CodeBlock = ({
        children,
        lang = "bash",
      }: {
        children: string;
        lang?: string;
      }) => (
        <div className="relative">
          <pre className="bg-secondary p-4 rounded-lg overflow-x-auto text-sm font-mono border">
            <code className={`language-${lang}`}>{children.trim()}</code>
          </pre>
          <Button
            variant="ghost"
            size="icon"
            className="absolute top-2 right-2 h-8 w-8"
            onClick={() => navigator.clipboard.writeText(children.trim())}
          >
            <Copy className="h-4 w-4" />
          </Button>
        </div>
      );

      const InlineCode = ({ children }: { children: string }) => (
        <code className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm font-semibold">
          {children}
        </code>
      );

      export default function App() {
        return (
          <div className="relative min-h-screen w-full overflow-x-hidden">
            <div className="absolute top-0 left-0 -z-10 h-full w-full bg-background">
              <div className="absolute bottom-auto left-auto right-0 top-0 h-[500px] w-[500px] -translate-x-[20%] translate-y-[20%] rounded-full bg-primary/20 opacity-50 blur-[80px]"></div>
              <div className="absolute bottom-0 right-auto left-0 top-auto h-[500px] w-[500px] translate-x-[20%] -translate-y-[10%] rounded-full bg-secondary opacity-50 blur-[80px]"></div>
            </div>

            <header className="sticky top-0 z-50 w-full border-b border-border/40 bg-background/80 backdrop-blur supports-[backdrop-filter]:bg-background/60">
              <div className="container flex h-14 max-w-screen-2xl items-center justify-between">
                <a href="#" className="flex items-center space-x-2">
                  <Code className="h-6 w-6" />
                  <span className="font-bold">scn-ts</span>
                </a>
                <a
                  href="https://github.com/nocapro/scn-ts"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <Button variant="outline" size="sm">
                    <Github className="h-4 w-4 mr-2" />
                    GitHub
                  </Button>
                </a>
              </div>
            </header>

            <main className="container max-w-5xl mx-auto px-4">
              <section className="text-center py-24 sm:py-32">
                <h1 className="text-4xl md:text-6xl font-extrabold tracking-tighter mb-6 bg-clip-text text-transparent bg-gradient-to-b from-foreground to-foreground/70">
                  Understand any TypeScript repo in 400 tokens.
                </h1>
                <p className="text-lg md:text-xl text-muted-foreground mb-10 max-w-3xl mx-auto">
                  scn-ts creates a dense, token-efficient cheat-sheet for your LLM.{" "}
                  <br />
                  Paste it in, and watch your AI refactor, review, or port code
                  without ever seeing the source.
                </p>
                <div className="flex flex-col sm:flex-row gap-4 justify-center">
                  <a href="#section-5">
                    <Button size="lg">
                      Get Started <Terminal className="ml-2 h-4 w-4" />
                    </Button>
                  </a>
                  <a href="https://pg.scn.noca.pro" target="_blank" rel="noopener noreferrer">
                    <Button variant="secondary" size="lg">
                      Live Playground <ArrowRight className="ml-2 h-4 w-4" />
                    </Button>
                  </a>
                </div>
              </section>

              <Section id="section-1">
                <div className="text-center mb-12">
                  <h2 className="text-3xl font-bold tracking-tight">
                    The High Cost of Context
                  </h2>
                  <p className="text-lg text-muted-foreground mt-2 max-w-2xl mx-auto">
                    LLMs are powerful, but their attention is expensive and limited.
                    Traditional methods of providing context just don't scale.
                  </p>
                </div>
                <div className="grid md:grid-cols-3 gap-8">
                  <Card>
                    <CardHeader>
                      <Zap className="h-8 w-8 text-primary mb-2" />
                      <CardTitle>Token Limits</CardTitle>
                    </CardHeader>
                    <CardContent>
                      Context windows are tiny. Pasting <InlineCode>/src</InlineCode>{" "}
                      consumes your entire budget before you've even asked a question.
                    </CardContent>
                  </Card>
                  <Card>
                    <CardHeader>
                      <BrainCircuit className="h-8 w-8 text-primary mb-2" />
                      <CardTitle>Signal vs. Noise</CardTitle>
                    </CardHeader>
                    <CardContent>
                      Models don't need semicolons, they need the dependency graph—what
                      talks to what, and who calls whom.
                    </CardContent>
                  </Card>
                  <Card>
                    <CardHeader>
                      <Workflow className="h-8 w-8 text-primary mb-2" />
                      <CardTitle>Broken Workflow</CardTitle>
                    </CardHeader>
                    <CardContent>
                      You don't need another IDE. You need a 1-second command that
                      turns <em>“here’s my repo”</em> into{" "}
                      <em>“here’s the summary”</em>.
                    </CardContent>
                  </Card>
                </div>
              </Section>

              <Section id="section-2">
                <div className="text-center mb-12">
                  <h2 className="text-3xl font-bold tracking-tight">
                    The Solution: Symbolic Context Notation
                  </h2>
                  <p className="text-lg text-muted-foreground mt-2 max-w-3xl mx-auto">
                    A zero-config, WASM-powered static analyzer that spits out a
                    dense, emoji-rich, token-counted summary of your project.
                  </p>
                </div>
                <CodeBlock>{`$ npx scn-ts "src/**/*.{ts,tsx}" --exclude="**/*.test.ts" --preset=compact`}</CodeBlock>
                <Card className="mt-8">
                  <CardContent className="p-6">
                    <CodeBlock lang="text">{`§1 src/main.tsx
        + ◇ App (1)
        + ~ fetchUsers (2)
          > 2, 3

      §2 src/services/api.ts
        ~ getUser (1) ...!
          < 1
          > 3

      §3 src/types.ts
        + {} User (1)
          + @ id: #string
          + @ name: #string`}</CodeBlock>
                  </CardContent>
                </Card>
                <div className="mt-8">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead className="w-[150px]">Symbol</TableHead>
                        <TableHead>Meaning</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      <TableRow>
                        <TableCell>
                          <InlineCode>§</InlineCode>
                        </TableCell>
                        <TableCell>File header (id + path)</TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>
                          <InlineCode>+ / -</InlineCode>
                        </TableCell>
                        <TableCell>Exported / Private symbol</TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>
                          <InlineCode>◇ ~ {}</InlineCode>
                        </TableCell>
                        <TableCell>Class, Function, Interface, JSX element</TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>
                          <InlineCode>&gt; / &lt;</InlineCode>
                        </TableCell>
                        <TableCell>Outgoing / Incoming call or import</TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>
                          <InlineCode>... ! o</InlineCode>
                        </TableCell>
                        <TableCell>Async, Throws, Pure function</TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </div>
              </Section>

              <Section id="section-3">
                <div className="text-center mb-12">
                  <h2 className="text-3xl font-bold tracking-tight">
                    Token Economics
                  </h2>
                  <p className="text-lg text-muted-foreground mt-2">
                    Fit 10x more context into every prompt.
                  </p>
                </div>
                <Card>
                  <CardContent className="p-0">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Representation</TableHead>
                          <TableHead>Tokens</TableHead>
                          <TableHead>% of 4k Window</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        <TableRow>
                          <TableCell>Raw Source</TableCell>
                          <TableCell>18,700</TableCell>
                          <TableCell>467% ❌</TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell>Minified</TableCell>
                          <TableCell>12,100</TableCell>
                          <TableCell>302% ❌</TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell>AST JSON</TableCell>
                          <TableCell>9,400</TableCell>
                          <TableCell>235% ❌</TableCell>
                        </TableRow>
                        <TableRow className="bg-primary/10 hover:bg-primary/20">
                          <TableCell className="font-bold text-primary">
                            SCN Compact
                          </TableCell>
                          <TableCell className="font-bold text-primary">
                            380
                          </TableCell>
                          <TableCell className="font-bold text-primary">
                            9% ✅
                          </TableCell>
                        </TableRow>
                      </TableBody>
                    </Table>
                  </CardContent>
                </Card>
              </Section>

              <Section id="section-4">
                <Card className="text-center p-8 md:p-12 bg-secondary/50">
                  <h2 className="text-3xl font-bold tracking-tight">
                    Live Demo Playground
                  </h2>
                  <p className="text-lg text-muted-foreground mt-2 mb-8">
                    Drag-and-drop a folder, move the slider, and watch the map
                    re-shape in real time.
                  </p>
                  <a
                    href="https://pg.scn.noca.pro"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    <Button size="lg">
                      Try the Playground <ArrowRight className="ml-2 h-4 w-4" />
                    </Button>
                  </a>
                </Card>
              </Section>

              <Section id="section-5">
                <div className="text-center mb-12">
                  <h2 className="text-3xl font-bold tracking-tight">
                    CLI Quick Start
                  </h2>
                  <p className="text-lg text-muted-foreground mt-2">
                    Get started in under a minute.
                  </p>
                </div>
                <CodeBlock>{`# global install
      npm i -g scn-ts            # or yarn/pnpm/bun

      # basic
      scn-ts "src/**/*.{ts,tsx}" --output map.scn

      # monorepo
      scn-ts "apps/*/src/**/*" --exclude="**/*.stories.tsx" --max-workers=8

      # watch mode
      scn-ts "src/**/*" --watch --preset=minimal`}</CodeBlock>
              </Section>

              <Section id="section-6">
                <div className="text-center mb-12">
                  <h2 className="text-3xl font-bold tracking-tight">
                    Frequently Asked Questions
                  </h2>
                </div>
                <div className="max-w-3xl mx-auto space-y-8">
                  <div className="border-t pt-4">
                    <p className="font-semibold text-lg">
                      Does GPT really understand the icons?
                    </p>
                    <p className="text-muted-foreground mt-1">
                      Yes. They are single Unicode chars and appear thousands of times
                      in training data (Unicode chess, cards, etc.). We
                      prompt-engineered once and never looked back.
                    </p>
                  </div>
                  <div className="border-t pt-4">
                    <p className="font-semibold text-lg">
                      Why not just <InlineCode>ctags</InlineCode> +{" "}
                      <InlineCode>grep</InlineCode>?
                    </p>
                    <p className="text-muted-foreground mt-1">
                      ctags is per-file, has no concept of cross-file edges, offers no token counting, and has no browser-based playground.
                    </p>
                  </div>
                  <div className="border-t pt-4">
                    <p className="font-semibold text-lg">
                      Will you break when TS 5.7 adds new syntax?
                    </p>
                    <p className="text-muted-foreground mt-1">
                      Only if the underlying tree-sitter grammar breaks, which is
                      usually fixed upstream within days. Our queries are tiny and easy to patch.
                    </p>
                  </div>
                  <div className="border-t pt-4">
                    <p className="font-semibold text-lg">
                      Is my proprietary code safe?
                    </p>
                    <p className="text-muted-foreground mt-1">
                      Everything runs locally on your machine. The WASM is loaded from
                      your domain; there is no telemetry and no cloud dependency.
                    </p>
                  </div>
                </div>
              </Section>
            </main>

            <footer className="border-t">
              <div className="container max-w-5xl mx-auto px-4 py-8 text-center text-muted-foreground">
                <p>MIT © 2025 scn-ts contributors</p>
                <p className="text-sm mt-4 max-w-xl mx-auto">
                  SCN is the shared engine behind{" "}
                  <a
                    href="https://www.noca.pro"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="font-semibold text-foreground hover:text-primary"
                  >
                    noca.pro
                  </a>{" "}
                  – a zero-friction, Visual Context Engineering platform with an AI-native patch engine.
                </p>
              </div>
            </footer>
          </div>
        );
      }
    patchStrategy: replace
snapshot:
  tailwind.config.cjs: |-
    /** @type {import('tailwindcss').Config} */
    module.exports = {
      darkMode: ["class"],
      content: [
        './index.html',
        './src/**/*.{js,ts,jsx,tsx}',
      ],
      prefix: "",
      theme: {
        container: {
          center: true,
          padding: "2rem",
          screens: {
            "2xl": "1400px",
          },
        },
        extend: {
          colors: {
            border: "hsl(var(--border))",
            input: "hsl(var(--input))",
            ring: "hsl(var(--ring))",
            background: "hsl(var(--background))",
            foreground: "hsl(var(--foreground))",
            primary: {
              DEFAULT: "hsl(var(--primary))",
              foreground: "hsl(var(--primary-foreground))",
            },
            secondary: {
              DEFAULT: "hsl(var(--secondary))",
              foreground: "hsl(var(--secondary-foreground))",
            },
            destructive: {
              DEFAULT: "hsl(var(--destructive))",
              foreground: "hsl(var(--destructive-foreground))",
            },
            muted: {
              DEFAULT: "hsl(var(--muted))",
              foreground: "hsl(var(--muted-foreground))",
            },
            accent: {
              DEFAULT: "hsl(var(--accent))",
              foreground: "hsl(var(--accent-foreground))",
            },
            popover: {
              DEFAULT: "hsl(var(--popover))",
              foreground: "hsl(var(--popover-foreground))",
            },
            card: {
              DEFAULT: "hsl(var(--card))",
              foreground: "hsl(var(--card-foreground))",
            },
          },
          borderRadius: {
            lg: "var(--radius)",
            md: "calc(var(--radius) - 2px)",
            sm: "calc(var(--radius) - 4px)",
          },
          keyframes: {
            "accordion-down": {
              from: { height: "0" },
              to: { height: "var(--radix-accordion-content-height)" },
            },
            "accordion-up": {
              from: { height: "var(--radix-accordion-content-height)" },
              to: { height: "0" },
            },
          },
          animation: {
            "accordion-down": "accordion-down 0.2s ease-out",
            "accordion-up": "accordion-up 0.2s ease-out",
          },
        },
      },
      plugins: [require("tailwindcss-animate")],
    }
  src/index.css: |-
    @tailwind base;
    @tailwind components;
    @tailwind utilities;
     
    @layer base {
      :root {
        --background: 0 0% 100%;
        --foreground: 222.2 84% 4.9%;

        --card: 0 0% 100%;
        --card-foreground: 222.2 84% 4.9%;
     
        --popover: 0 0% 100%;
        --popover-foreground: 222.2 84% 4.9%;
     
        --primary: 262.1 83.3% 57.8%;
        --primary-foreground: 210 40% 98%;
     
        --secondary: 210 40% 96.1%;
        --secondary-foreground: 215.4 16.3% 46.9%;
     
        --muted: 210 40% 96.1%;
        --muted-foreground: 215.4 16.3% 46.9%;
     
        --accent: 210 40% 96.1%;
        --accent-foreground: 215.4 16.3% 46.9%;
     
        --destructive: 0 84.2% 60.2%;
        --destructive-foreground: 210 40% 98%;

        --border: 214.3 31.8% 91.4%;
        --input: 214.3 31.8% 91.4%;
        --ring: 222.2 84% 4.9%;
     
        --radius: 0.5rem;
      }
     
      .dark {
        --background: 222.2 84% 4.9%;
        --foreground: 210 40% 98%;
     
        --card: 222.2 84% 4.9%;
        --card-foreground: 210 40% 98%;
     
        --popover: 222.2 84% 4.9%;
        --popover-foreground: 210 40% 98%;
     
        --primary: 263.4 95.2% 66.3%;
        --primary-foreground: 210 40% 98%;
     
        --secondary: 217.2 32.6% 17.5%;
        --secondary-foreground: 210 40% 98%;
     
        --muted: 217.2 32.6% 17.5%;
        --muted-foreground: 215 20.2% 65.1%;
     
        --accent: 217.2 32.6% 17.5%;
        --accent-foreground: 210 40% 98%;
     
        --destructive: 0 62.8% 30.6%;
        --destructive-foreground: 210 40% 98%;
     
        --border: 217.2 32.6% 17.5%;
        --input: 217.2 32.6% 17.5%;
        --ring: 263.4 95.2% 66.3%;
      }
    }
     
    @layer base {
      * {
        @apply border-border;
      }
      body {
        @apply bg-background text-foreground;
      }
    }
  src/App.tsx: |-
    import { Button } from "@/components/ui/button";
    import { Card, CardContent } from "@/components/ui/card";
    import {
      Table,
      TableBody,
      TableCell,
      TableHead,
      TableHeader,
      TableRow,
    } from "@/components/ui/table";
    import { ArrowRight, Code, Copy, Github } from "lucide-react";

    const Section = ({
      num,
      title,
      children,
    }: {
      num: number;
      title: string;
      children: React.ReactNode;
    }) => (
      <section className="py-12" id={`section-${num}`}>
        <h2 className="text-3xl font-bold tracking-tight mb-8">
          <span className="text-primary mr-4">{num}.</span>
          {title}
        </h2>
        <div className="space-y-6 text-lg text-muted-foreground">{children}</div>
      </section>
    );

    const CodeBlock = ({
      children,
      lang = "bash",
    }: {
      children: string;
      lang?: string;
    }) => (
      <div className="relative">
        <pre className="bg-secondary p-4 rounded-lg overflow-x-auto text-sm font-mono border">
          <code>{children.trim()}</code>
        </pre>
        <Button
          variant="ghost"
          size="icon"
          className="absolute top-2 right-2 h-8 w-8"
          onClick={() => navigator.clipboard.writeText(children.trim())}
        >
          <Copy className="h-4 w-4" />
        </Button>
      </div>
    );

    const InlineCode = ({ children }: { children: string }) => (
      <code className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm font-semibold">
        {children}
      </code>
    );

    export default function App() {
      return (
        <div className="relative min-h-screen w-full overflow-x-hidden">
          <div className="absolute top-0 left-0 -z-10 h-full w-full bg-background">
            <div className="absolute bottom-auto left-auto right-0 top-0 h-[500px] w-[500px] -translate-x-[30%] translate-y-[20%] rounded-full bg-[rgba(109,40,217,0.25)] opacity-50 blur-[80px]"></div>
          </div>

          <header className="sticky top-0 z-50 w-full border-b border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
            <div className="container flex h-14 max-w-screen-2xl items-center justify-between">
              <a href="#" className="flex items-center space-x-2">
                <Code className="h-6 w-6" />
                <span className="font-bold">scn-ts</span>
              </a>
              <a href="https://github.com/nocapro/scn-ts" target="_blank" rel="noopener noreferrer">
                <Button variant="outline" size="sm">
                  <Github className="h-4 w-4 mr-2" />
                  GitHub
                </Button>
              </a>
            </div>
          </header>

          <main className="container max-w-5xl mx-auto px-4 py-16">
            <section className="text-center py-20">
              <h1 className="text-5xl md:text-6xl font-extrabold tracking-tighter mb-4">
                scn-ts – 400-token cheat-sheet your LLM actually reads
              </h1>
              <p className="text-xl text-muted-foreground mb-8 max-w-3xl mx-auto">
                Symbolic Context Notation for TypeScript/JavaScript/CSS and friends
              </p>
              <blockquote className="text-lg italic border-l-4 border-primary pl-4 text-left max-w-xl mx-auto my-12">
                “Show me the shape of your repo in 500 tokens or I’m not reading it.”
              </blockquote>
            </section>

            <Section num={1} title="Why">
              <p>Large Language Models are starving.
              Feed them a whole repo and they drown in semicolons.
              Feed them a file list and they hallucinate imports.</p>
              <ul className="list-disc list-inside space-y-2">
                <li><strong>Context windows are tiny.</strong> 8k tokens disappears fast when you paste <InlineCode>/src</InlineCode>.</li>
                <li><strong>GPT doesn’t need your <InlineCode>node_modules</InlineCode>.</strong> It needs the graph – what talks to what.</li>
                <li><strong>You don’t need another IDE.</strong> You need a 1-second command that turns <em>“here’s my repo”</em> into <em>“here’s the 400-token cheat-sheet the model actually reads”</em>.</li>
              </ul>
              <p>scn-ts is a zero-config, WASM-powered static analyzer that spits out <strong>SCN</strong> – a dense, emoji-rich, token-counted summary of every symbol, dependency and cross-file call in your project. Paste the output straight into GPT/Claude and watch it refactor, review or port your code without ever seeing the source.</p>
            </Section>

            <Section num={2} title="What you get (real output)">
              <CodeBlock>{`$ npx scn-ts "src/**/*.{ts,tsx}" --exclude="**/*.test.ts" --preset=compact`}</CodeBlock>
              <CodeBlock lang="text">{`§1 src/main.tsx
      + ◇ App (1)
      + ~ fetchUsers (2)
        > 2, 3

    §2 src/services/api.ts
      ~ getUser (1) ...!
        < 1
        > 3

    §3 src/types.ts
      + {} User (1)
        + @ id: #string
        + @ name: #string`}</CodeBlock>
              <ul className="space-y-2 text-base">
                <li><strong>§</strong> file header (id + path)</li>
                <li><strong>+ / -</strong> exported / private</li>
                <li><strong>◇ ~ {} ⛶ ¶</strong> class, function, interface, JSX element, CSS rule</li>
                <li><strong>&gt;</strong> outgoing call / import</li>
                <li><strong>&lt;</strong> incoming caller</li>
                <li><strong>... ! o</strong> async, throws, pure</li>
                <li><strong>#type</strong> inline type signature</li>
                <li>numbers in <InlineCode>()</InlineCode> = unique IDs so the model can disambiguate <InlineCode>User</InlineCode> the interface from <InlineCode>User</InlineCode> the variable.</li>
              </ul>
              <p>Token count: <strong>352</strong> for a 12-file mini SaaS – <strong>92% smaller</strong> than minified source.</p>
            </Section>
            
            <Section num={3} title="Token economics (why this matters)">
                <Card><CardContent className="p-0">
                    <Table>
                        <TableHeader><TableRow><TableHead>representation</TableHead><TableHead>tokens</TableHead><TableHead>% of 4k window</TableHead></TableRow></TableHeader>
                        <TableBody>
                            <TableRow><TableCell>raw source</TableCell><TableCell>18 700</TableCell><TableCell>467% ❌</TableCell></TableRow>
                            <TableRow><TableCell>minified</TableCell><TableCell>12 100</TableCell><TableCell>302% ❌</TableCell></TableRow>
                            <TableRow><TableCell>AST JSON</TableCell><TableCell>9 400</TableCell><TableCell>235% ❌</TableCell></TableRow>
                            <TableRow><TableCell className="font-bold">SCN compact</TableCell><TableCell className="font-bold">380</TableCell><TableCell className="font-bold text-green-400">9% ✅</TableCell></TableRow>
                        </TableBody>
                    </Table>
                </CardContent></Card>
                <p>You can now fit <strong>ten services</strong> in the same prompt that previously held <em>half</em> a service.</p>
            </Section>

            <Section num={4} title="Live demo Playground – watch the count melt">
              <a href="https://pg.scn.noca.pro" target="_blank" rel="noopener noreferrer">
                <Button variant="secondary" size="lg">
                  pg.scn.noca.pro <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </a>
              <p>Drag-and-drop a folder, move the “token target” slider, see the map re-shape in real time.</p>
              <Card><CardContent className="p-0">
                <Table>
                  <TableHeader><TableRow><TableHead>slider move</TableHead><TableHead>tokens saved</TableHead><TableHead>architectural loss</TableHead></TableRow></TableHeader>
                  <TableBody>
                    <TableRow><TableCell>hide private symbols</TableCell><TableCell>–35 %</TableCell><TableCell>zero</TableCell></TableRow>
                    <TableRow><TableCell>drop method bodies</TableCell><TableCell>–22 %</TableCell><TableCell>zero (signatures stay)</TableCell></TableRow>
                    <TableRow><TableCell>filter <InlineCode>*.test.ts</InlineCode></TableCell><TableCell>–18 %</TableCell><TableCell>zero</TableCell></TableRow>
                    <TableRow><TableCell>collapse React props</TableCell><TableCell>–15 %</TableCell><TableCell>zero</TableCell></TableRow>
                    <TableRow><TableCell className="font-bold">total</TableCell><TableCell className="font-bold">~ 70 %</TableCell><TableCell className="font-bold">none</TableCell></TableRow>
                  </TableBody>
                </Table>
              </CardContent></Card>
            </Section>
            
            <Section num={5} title="CLI quick start">
              <CodeBlock>{`# global install
    npm i -g scn-ts            # or yarn/pnpm/bun

    # basic
    scn-ts "src/**/*.{ts,tsx}" --output map.scn

    # monorepo
    scn-ts "apps/*/src/**/*" --exclude="**/*.stories.tsx" --max-workers=8

    # watch mode
    scn-ts "src/**/*" --watch --preset=minimal`}</CodeBlock>
            </Section>
            
            <Section num={15} title="FAQ">
                <div className="space-y-4">
                    <p><strong>Q: Does GPT really understand the icons?</strong><br/>
                    A: Yes. They are single Unicode chars and appear thousands of times in training data (Unicode chess, cards, etc.). We prompt-engineered once and never looked back.</p>
                    <p><strong>Q: Why not just <InlineCode>ctags</InlineCode> + <InlineCode>grep</InlineCode>?</strong><br/>
                    A: ctags is per-file, no cross-file edges, no token counting, no browser.</p>
                    <p><strong>Q: Will you break when TS 5.7 adds new syntax?</strong><br/>
                    A: Only if tree-sitter grammar breaks – usually fixed upstream within days. Our queries are tiny, easy to patch.</p>
                    <p><strong>Q: Proprietary code?</strong><br/>
                    A: Everything runs locally. WASM is loaded from your domain; no telemetry, no cloud.</p>
                </div>
            </Section>
          </main>
          
          <footer className="border-t">
            <div className="container max-w-5xl mx-auto px-4 py-8 text-center text-muted-foreground">
                <p>MIT © 2025 scn-ts contributors – built during the context-window crunch weeks.</p>
                <p className="mt-2">Star if you hate pasting 3k lines into ChatGPT.</p>
                <hr className="my-8 border-border" />
                <p className="text-sm">
                    SCN is the shared engine behind <a href="https://www.noca.pro" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">www.noca.pro</a> – a zero-friction, Visual Context Engineering with AI-native patch engine that turns your clipboard into a surgical code-editing laser.
                </p>
            </div>
          </footer>
        </div>
      );
    }
approved: false
linesAdded: 335
linesRemoved: 132
linesDifference: 467
gitCommittedAt: null
status: pending
id: 1
