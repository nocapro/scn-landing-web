uuid: f19d6eb3-f726-4b2a-ae60-31653896fdce
projectId: scn-landing-web-gemini
createdAt: '2025-09-11T08:32:45.903Z'
gitCommitMsg: >-
  feat(hero): enhance title styling for emphasis

  - The hero section title has been updated to visually emphasize the "<1k
  tokens." portion. - The title is now split into two parts for separate
  styling. - A styled "pill" component is used to highlight "<1k tokens." with a
  background and accent color. - The "<" symbol has been made smaller to improve
  visual balance.
promptSummary: >-
  Modify the hero section title `Understand any codebase in <1k tokens.` to make
  the `<` symbol smaller and emphasize the `<1k tokens` part.
reasoning:
  - >-
    Based on your request to make the `<` symbol in the hero title smaller and
    to emphasize the `<1k tokens` part with a more engaging UI, I'll make the
    following changes.
  - >-
    First, I'll update the `heroContent` in `src/content/sections.content.tsx`
    to split the title into two parts. This allows for more granular control
    over styling in the component.
  - >-
    Next, in `src/components/sections/Hero.tsx`, I'll modify the `h1` element to
    incorporate this change. I'll wrap the main part of the title in a `span` to
    apply the existing gradient effect, and I'll create a new styled "pill"
    element for the `<1k tokens.` part to make it stand out. Inside this pill,
    the `<` symbol will be made smaller.
  - >-
    These changes will achieve the desired visual effect for your hero section
    title.
operations:
  - type: write
    path: src/content/sections.content.tsx
    content: |+
      --- src/content/sections.content.tsx
      +++ src/content/sections.content.tsx
      @@ -218,7 +218,8 @@
       };
       
       export const heroContent = {
      -  title: "Understand any codebase in <1k tokens.",
      +  title: "Understand any codebase in",
      +  highlightedTitle: "1k tokens.",
         subtitle: (
           <>
             SCN creates a dense, token-efficient cheat-sheet for your LLM.{" "}

    patchStrategy: standard-diff
  - type: write
    path: src/components/sections/Hero.tsx
    content: >+
      --- src/components/sections/Hero.tsx

      +++ src/components/sections/Hero.tsx

      @@ -10,9 +10,19 @@
       export const Hero = () => (
         <section className="grid lg:grid-cols-2 gap-12 items-center py-24 sm:py-32">
           <div className="text-center lg:text-left space-y-6">
      -      <h1 className="text-4xl md:text-6xl font-extrabold tracking-tighter
      bg-clip-text text-transparent bg-gradient-to-b from-foreground
      to-foreground/70 opacity-0 animate-fade-in">

      -        {heroContent.title}

      +      <h1 className="text-4xl md:text-6xl font-extrabold tracking-tighter
      opacity-0 animate-fade-in">

      +        <span className="bg-clip-text text-transparent bg-gradient-to-b
      from-foreground to-foreground/70">

      +          {heroContent.title}

      +        </span>{" "}

      +        <span className="inline-block whitespace-nowrap rounded-full
      bg-primary/10 px-4 py-2 font-medium text-primary align-middle">

      +          <span className="relative -top-[0.05em] text-3xl md:text-5xl">

      +            &lt;

      +          </span>

      +          {heroContent.highlightedTitle}

      +        </span>
             </h1>
             <p className="text-lg md:text-xl text-muted-foreground max-w-2xl mx-auto lg:mx-0 opacity-0 animate-fade-in [animation-delay:0.2s]">
               {heroContent.subtitle}
             </p>

    patchStrategy: standard-diff
snapshot:
  src/content/sections.content.tsx: |
    import {
      Box,
      BrainCircuit,
      GitMerge,
      Hash,
      Network,
      Puzzle,
      Scissors,
      SlidersHorizontal,
      Smile,
      Workflow,
      Zap,
    } from "lucide-react";
    import { InlineCode } from "@/components/InlineCode";

    export const contextCostContent = {
      title: "The High Cost of Context",
      subtitle:
        "LLMs are powerful, but their attention is expensive and limited. Traditional methods of providing context just don't scale.",
      cards: [
        {
          icon: Zap,
          title: "Token Limits",
          content: (
            <>
              Context windows are tiny. Pasting <InlineCode>/src</InlineCode>{" "}
              consumes your entire budget before you've even asked a question.
            </>
          ),
        },
        {
          icon: BrainCircuit,
          title: "Signal vs. Noise",
          content:
            "Models don't need semicolons, they need the dependency graph—what talks to what, and who calls whom.",
        },
        {
          icon: Workflow,
          title: "Broken Workflow",
          content: (
            <>
              You don't need another IDE. You need a 1-second command that turns{" "}
              <em>“here’s my repo”</em> into <em>“here’s the summary”</em>.
            </>
          ),
        },
      ],
    };

    export const solutionContent = {
      title: "The Solution: Symbolic Context Notation",
      subtitle:
        "A zero-config, WASM-powered static analyzer that spits out a dense, emoji-rich, token-counted summary of your project.",
      cliCommand: `npx scn "src/**/*.{ts,tsx}" --exclude="**/*.test.ts" --preset=compact`,
      exampleOutput: `§1 src/main.tsx
      + ◇ App (1)
      + ~ fetchUsers (2)
        > 2, 3

    §2 src/services/api.ts
      ~ getUser (1) ...!
        < 1
        > 3

    §3 src/types.ts
      + {} User (1)
        + @ id: #string
        + @ name: #string`,
      legend: [
        { symbol: "§", meaning: "File header (id + path)" },
        { symbol: "+ / -", meaning: "Exported / Private symbol" },
        { symbol: "◇ ~ {}", meaning: "Class, Function, Interface, JSX element" },
        { symbol: "> / <", meaning: "Outgoing / Incoming call or import" },
        { symbol: "... ! o", meaning: "Async, Throws, Pure function" },
      ],
    };

    export const tokenEconomicsContent = {
      title: "Token Economics",
      subtitle: "Fit 10x more context into every prompt.",
      table: [
        { representation: "Raw Source", tokens: "18,700", window: "467% ❌" },
        { representation: "Minified", tokens: "12,100", window: "302% ❌" },
        { representation: "AST JSON", tokens: "9,400", window: "235% ❌" },
        {
          representation: "SCN Compact",
          tokens: "380",
          window: "9% ✅",
          highlight: true,
        },
      ],
    };

    export const playgroundContent = {
      title: "Live Demo Playground",
      subtitle:
        "Drag-and-drop a folder, move the slider, and watch the map re-shape in real time.",
      buttonText: "Try the Playground",
    };

    export const quickStartContent = {
      title: "CLI Quick Start",
      subtitle: "Get started in under a minute.",
      code: `# global install
    npm i -g scn            # or yarn/pnpm/bun

    # basic
    scn "src/**/*.{ts,tsx}" --output map.scn

    # monorepo
    scn "apps/*/src/**/*" --exclude="**/*.stories.tsx" --max-workers=8

    # watch mode
    scn "src/**/*" --watch --preset=minimal`,
    };

    export const faqContent = {
      title: "Frequently Asked Questions",
      questions: [
        {
          question: "Does GPT really understand the icons?",
          answer:
            "Yes. They are single Unicode chars and appear thousands of times in training data (Unicode chess, cards, etc.).",
        },
        {
          question: (
            <>
              Why not just <InlineCode>ctags</InlineCode> +{" "}
              <InlineCode>grep</InlineCode>?
            </>
          ),
          answer:
            "ctags is per-file, has no concept of cross-file edges, offers no token counting, and has no browser-based playground.",
        },
        {
          question: "What happens when a language adds new syntax?",
          answer:
            "Only if the underlying tree-sitter grammar breaks, which is usually fixed upstream within days. Our queries are tiny and easy to patch.",
        },
        {
          question: "Is my proprietary code safe?",
          answer:
            "Everything runs locally on your machine. The WASM is loaded from your domain; there is no telemetry and no cloud dependency.",
        },
      ],
    };

    export const designDecisionsContent = {
      title: "Design Decisions",
      subtitle:
        "Built on a foundation of modern, performant, and portable technologies.",
      cards: [
        {
          icon: GitMerge,
          title: "tree-sitter",
          content: "Incremental, error-tolerant, multi-language parsing.",
        },
        {
          icon: Box,
          title: "WASM",
          content: "Same binary runs in browser, edge, or server.",
        },
        {
          icon: Puzzle,
          title: "No Bundler Magic",
          content: (
            <>
              ES modules only, <InlineCode>?module</InlineCode> CDN link works.
            </>
          ),
        },
        {
          icon: Scissors,
          title: "No AST Dump",
          content: (
            <>
              We throw away <em>statements</em> and keep <em>symbols + edges</em>.
            </>
          ),
        },
        {
          icon: Network,
          title: "Topological Sort",
          content: "GPT sees bottom-up dependencies, which reduces hallucination.",
        },
        {
          icon: Smile,
          title: "Stable Icon Set",
          content: "Single Unicode char, token-efficient, and familiar to models.",
        },
        {
          icon: Hash,
          title: "Hierarchical IDs",
          content:
            'Lets models reason about "file 3 symbol 2" without name clashes.',
        },
        {
          icon: SlidersHorizontal,
          title: "Preset System",
          content: "Hard-coded filters so you don’t need a complex configuration.",
        },
      ],
    };

    export const useCasesContent = {
      title: "Common Use-Cases",
      subtitle:
        "From refactoring to on-boarding, SCN accelerates your workflow.",
      prompts: [
        {
          scenario: "Refactor Epic",
          prompt: "SCN + “move auth logic to new package”",
        },
        { scenario: "Code Review", prompt: "SCN + “any circular deps?”" },
        {
          scenario: "Add Feature",
          prompt: "SCN + “add Stripe webhook handler following same pattern”",
        },
        {
          scenario: "Migration",
          prompt: "SCN + “convert from Express to Fastify”",
        },
        { scenario: "On-boarding", prompt: "SCN + “explain data flow”" },
      ],
    };

    export const contributeContent = {
      title: "Contribute to SCN",
      subtitle:
        "Help us map the world's code. Add a language, improve heuristics, or beat our performance benchmarks. All contributions are welcome.",
      buttonText: "View on GitHub",
    };

    export const heroContent = {
      title: "Understand any codebase in <1k tokens.",
      subtitle: (
        <>
          SCN creates a dense, token-efficient cheat-sheet for your LLM.{" "}
          <br className="hidden md:block" />
          Paste it in, and watch your AI refactor, review, or port code without
          ever seeing the source.
        </>
      ),
      getStartedButton: "Get Started",
      playgroundButton: "Live Playground",
      before: {
        title: "BEFORE: 300+ tokens",
        code: `export class ApiClient {
      constructor(private apiKey: string) {}

      async fetchUsers(page: number): Promise<User[]> {
        const res = await fetch(\`/api/users?page=\${page}\`, {
          headers: { 'X-API-KEY': this.apiKey }
        });
        if (!res.ok) throw new Error('API Error');
        return res.json();
      }
    }`,
      },
      after: {
        title: "AFTER: 38 tokens",
        code: `§1 src/api.ts
    + ◇ ApiClient
      - @ apiKey: #string
      + o constructor
      + ~ fetchUsers ...!
        > User`,
      },
    };
  src/components/sections/Hero.tsx: |-
    import { Button } from "@/components/ui/button";
    import {
      Card,
      CardContent,
      CardHeader,
      CardTitle,
    } from "@/components/ui/card";
    import { ArrowDown, ArrowRight, Terminal, Zap } from "lucide-react";
    import { CodeBlock } from "@/components/CodeBlock";
    import { heroContent } from "@/content/sections.content";
    import { PLAYGROUND_URL } from "@/lib/constants";

    export const Hero = () => (
      <section className="grid lg:grid-cols-2 gap-12 items-center py-24 sm:py-32">
        <div className="text-center lg:text-left space-y-6">
          <h1 className="text-4xl md:text-6xl font-extrabold tracking-tighter bg-clip-text text-transparent bg-gradient-to-b from-foreground to-foreground/70 opacity-0 animate-fade-in">
            {heroContent.title}
          </h1>
          <p className="text-lg md:text-xl text-muted-foreground max-w-2xl mx-auto lg:mx-0 opacity-0 animate-fade-in [animation-delay:0.2s]">
            {heroContent.subtitle}
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center lg:justify-start opacity-0 animate-fade-in [animation-delay:0.3s]">
            <a href="#section-5">
              <Button size="lg">
                {heroContent.getStartedButton}{" "}
                <Terminal className="ml-2 h-4 w-4" />
              </Button>
            </a>
            <a href={PLAYGROUND_URL} target="_blank" rel="noopener noreferrer">
              <Button variant="secondary" size="lg">
                {heroContent.playgroundButton}{" "}
                <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
            </a>
          </div>
        </div>
        <div className="relative rounded-xl border p-4 lg:p-6 bg-gradient-to-b from-secondary/30 to-background">
          <Card className="bg-background/50 backdrop-blur-sm opacity-0 animate-slide-in-from-top [animation-delay:0.5s]">
            <CardHeader className="flex-row items-center justify-between p-4">
              <CardTitle className="text-base font-semibold text-muted-foreground">
                {heroContent.before.title}
              </CardTitle>
              <Zap className="h-5 w-5 text-destructive" />
            </CardHeader>
            <CardContent className="p-0">
              <CodeBlock lang="typescript" className="border-0 rounded-t-none bg-transparent p-4">{heroContent.before.code}</CodeBlock>
            </CardContent>
          </Card>

          <div className="my-6 flex justify-center opacity-0 animate-fade-in [animation-delay:0.7s]">
            <div className="h-10 w-10 bg-primary rounded-full flex items-center justify-center text-primary-foreground animate-pulse">
              <ArrowDown className="h-5 w-5" />
            </div>
          </div>

          <Card className="border-primary/50 bg-background/50 backdrop-blur-sm animate-glow opacity-0 animate-slide-in-from-bottom [animation-delay:0.9s]">
            <CardHeader className="flex-row items-center justify-between p-4">
              <CardTitle className="text-base font-semibold text-muted-foreground">
                {heroContent.after.title}
              </CardTitle>
              <Zap className="h-5 w-5 text-primary" />
            </CardHeader>
            <CardContent className="p-0">
              <CodeBlock lang="text" className="border-0 rounded-t-none bg-transparent p-4">{heroContent.after.code}</CodeBlock>
            </CardContent>
          </Card>
        </div>
      </section>
    );
approved: false
linesAdded: 12
linesRemoved: 3
linesDifference: 15
gitCommittedAt: null
status: pending
id: 20
